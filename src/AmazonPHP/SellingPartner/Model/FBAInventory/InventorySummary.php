<?php declare(strict_types=1);
/**
 * InventorySummary.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for FBA Inventory.
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\FBAInventory;

use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InventorySummary implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'InventorySummary';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'asin' => 'string',
        'fnSku' => 'string',
        'sellerSku' => 'string',
        'condition' => 'string',
        'inventoryDetails' => '\AmazonPHP\SellingPartner\Model\FBAInventory\InventoryDetails',
        'lastUpdatedTime' => '\DateTime',
        'productName' => 'string',
        'totalQuantity' => 'int',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'asin' => null,
        'fnSku' => null,
        'sellerSku' => null,
        'condition' => null,
        'inventoryDetails' => null,
        'lastUpdatedTime' => 'date-time',
        'productName' => null,
        'totalQuantity' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'asin' => 'asin',
        'fnSku' => 'fnSku',
        'sellerSku' => 'sellerSku',
        'condition' => 'condition',
        'inventoryDetails' => 'inventoryDetails',
        'lastUpdatedTime' => 'lastUpdatedTime',
        'productName' => 'productName',
        'totalQuantity' => 'totalQuantity',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'asin' => 'setAsin',
        'fnSku' => 'setFnSku',
        'sellerSku' => 'setSellerSku',
        'condition' => 'setCondition',
        'inventoryDetails' => 'setInventoryDetails',
        'lastUpdatedTime' => 'setLastUpdatedTime',
        'productName' => 'setProductName',
        'totalQuantity' => 'setTotalQuantity',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'asin' => 'getAsin',
        'fnSku' => 'getFnSku',
        'sellerSku' => 'getSellerSku',
        'condition' => 'getCondition',
        'inventoryDetails' => 'getInventoryDetails',
        'lastUpdatedTime' => 'getLastUpdatedTime',
        'productName' => 'getProductName',
        'totalQuantity' => 'getTotalQuantity',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin'] = $data['asin'] ?? null;
        $this->container['fnSku'] = $data['fnSku'] ?? null;
        $this->container['sellerSku'] = $data['sellerSku'] ?? null;
        $this->container['condition'] = $data['condition'] ?? null;
        $this->container['inventoryDetails'] = $data['inventoryDetails'] ?? null;
        $this->container['lastUpdatedTime'] = $data['lastUpdatedTime'] ?? null;
        $this->container['productName'] = $data['productName'] ?? null;
        $this->container['totalQuantity'] = $data['totalQuantity'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets asin.
     */
    public function getAsin() : ?string
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin.
     *
     * @param null|string $asin the Amazon Standard Identification Number (ASIN) of an item
     */
    public function setAsin(?string $asin) : self
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets fnSku.
     */
    public function getFnSku() : ?string
    {
        return $this->container['fnSku'];
    }

    /**
     * Sets fnSku.
     *
     * @param null|string $fnSku amazon's fulfillment network SKU identifier
     */
    public function setFnSku(?string $fnSku) : self
    {
        $this->container['fnSku'] = $fnSku;

        return $this;
    }

    /**
     * Gets sellerSku.
     */
    public function getSellerSku() : ?string
    {
        return $this->container['sellerSku'];
    }

    /**
     * Sets sellerSku.
     *
     * @param null|string $sellerSku the seller SKU of the item
     */
    public function setSellerSku(?string $sellerSku) : self
    {
        $this->container['sellerSku'] = $sellerSku;

        return $this;
    }

    /**
     * Gets condition.
     */
    public function getCondition() : ?string
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition.
     *
     * @param null|string $condition the condition of the item as described by the seller (for example, New Item)
     */
    public function setCondition(?string $condition) : self
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets inventoryDetails.
     */
    public function getInventoryDetails() : ?InventoryDetails
    {
        return $this->container['inventoryDetails'];
    }

    /**
     * Sets inventoryDetails.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\FBAInventory\InventoryDetails $inventoryDetails inventoryDetails
     */
    public function setInventoryDetails(?InventoryDetails $inventoryDetails) : self
    {
        $this->container['inventoryDetails'] = $inventoryDetails;

        return $this;
    }

    /**
     * Gets lastUpdatedTime.
     */
    public function getLastUpdatedTime() : ?\DateTime
    {
        return $this->container['lastUpdatedTime'];
    }

    /**
     * Sets lastUpdatedTime.
     *
     * @param null|\DateTime $lastUpdatedTime the date and time that any quantity was last updated
     */
    public function setLastUpdatedTime(?\DateTime $lastUpdatedTime) : self
    {
        $this->container['lastUpdatedTime'] = $lastUpdatedTime;

        return $this;
    }

    /**
     * Gets productName.
     */
    public function getProductName() : ?string
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName.
     *
     * @param null|string $productName the localized language product title of the item within the specific marketplace
     */
    public function setProductName(?string $productName) : self
    {
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets totalQuantity.
     */
    public function getTotalQuantity() : ?int
    {
        return $this->container['totalQuantity'];
    }

    /**
     * Sets totalQuantity.
     *
     * @param null|int $totalQuantity the total number of units in an inbound shipment or in Amazon fulfillment centers
     */
    public function setTotalQuantity(?int $totalQuantity) : self
    {
        $this->container['totalQuantity'] = $totalQuantity;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
