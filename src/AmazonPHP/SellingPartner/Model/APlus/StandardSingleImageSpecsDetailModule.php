<?php declare(strict_types=1);
/**
 * StandardSingleImageSpecsDetailModule.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for A+ Content Management.
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\APlus;

use AmazonPHP\SellingPartner\Model\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class StandardSingleImageSpecsDetailModule implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'StandardSingleImageSpecsDetailModule';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'headline' => '\AmazonPHP\SellingPartner\Model\APlus\TextComponent',
        'image' => '\AmazonPHP\SellingPartner\Model\APlus\ImageComponent',
        'descriptionHeadline' => '\AmazonPHP\SellingPartner\Model\APlus\TextComponent',
        'descriptionBlock1' => '\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock',
        'descriptionBlock2' => '\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock',
        'specificationHeadline' => '\AmazonPHP\SellingPartner\Model\APlus\TextComponent',
        'specificationListBlock' => '\AmazonPHP\SellingPartner\Model\APlus\StandardHeaderTextListBlock',
        'specificationTextBlock' => '\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'headline' => null,
        'image' => null,
        'descriptionHeadline' => null,
        'descriptionBlock1' => null,
        'descriptionBlock2' => null,
        'specificationHeadline' => null,
        'specificationListBlock' => null,
        'specificationTextBlock' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'headline' => 'headline',
        'image' => 'image',
        'descriptionHeadline' => 'descriptionHeadline',
        'descriptionBlock1' => 'descriptionBlock1',
        'descriptionBlock2' => 'descriptionBlock2',
        'specificationHeadline' => 'specificationHeadline',
        'specificationListBlock' => 'specificationListBlock',
        'specificationTextBlock' => 'specificationTextBlock',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'headline' => 'setHeadline',
        'image' => 'setImage',
        'descriptionHeadline' => 'setDescriptionHeadline',
        'descriptionBlock1' => 'setDescriptionBlock1',
        'descriptionBlock2' => 'setDescriptionBlock2',
        'specificationHeadline' => 'setSpecificationHeadline',
        'specificationListBlock' => 'setSpecificationListBlock',
        'specificationTextBlock' => 'setSpecificationTextBlock',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'headline' => 'getHeadline',
        'image' => 'getImage',
        'descriptionHeadline' => 'getDescriptionHeadline',
        'descriptionBlock1' => 'getDescriptionBlock1',
        'descriptionBlock2' => 'getDescriptionBlock2',
        'specificationHeadline' => 'getSpecificationHeadline',
        'specificationListBlock' => 'getSpecificationListBlock',
        'specificationTextBlock' => 'getSpecificationTextBlock',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['headline'] = $data['headline'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['descriptionHeadline'] = $data['descriptionHeadline'] ?? null;
        $this->container['descriptionBlock1'] = $data['descriptionBlock1'] ?? null;
        $this->container['descriptionBlock2'] = $data['descriptionBlock2'] ?? null;
        $this->container['specificationHeadline'] = $data['specificationHeadline'] ?? null;
        $this->container['specificationListBlock'] = $data['specificationListBlock'] ?? null;
        $this->container['specificationTextBlock'] = $data['specificationTextBlock'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets headline.
     */
    public function getHeadline() : ?TextComponent
    {
        return $this->container['headline'];
    }

    /**
     * Sets headline.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\TextComponent $headline headline
     */
    public function setHeadline(?TextComponent $headline) : self
    {
        $this->container['headline'] = $headline;

        return $this;
    }

    /**
     * Gets image.
     */
    public function getImage() : ?ImageComponent
    {
        return $this->container['image'];
    }

    /**
     * Sets image.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\ImageComponent $image image
     */
    public function setImage(?ImageComponent $image) : self
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets descriptionHeadline.
     */
    public function getDescriptionHeadline() : ?TextComponent
    {
        return $this->container['descriptionHeadline'];
    }

    /**
     * Sets descriptionHeadline.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\TextComponent $descriptionHeadline descriptionHeadline
     */
    public function setDescriptionHeadline(?TextComponent $descriptionHeadline) : self
    {
        $this->container['descriptionHeadline'] = $descriptionHeadline;

        return $this;
    }

    /**
     * Gets descriptionBlock1.
     */
    public function getDescriptionBlock1() : ?StandardTextBlock
    {
        return $this->container['descriptionBlock1'];
    }

    /**
     * Sets descriptionBlock1.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock $descriptionBlock1 descriptionBlock1
     */
    public function setDescriptionBlock1(?StandardTextBlock $descriptionBlock1) : self
    {
        $this->container['descriptionBlock1'] = $descriptionBlock1;

        return $this;
    }

    /**
     * Gets descriptionBlock2.
     */
    public function getDescriptionBlock2() : ?StandardTextBlock
    {
        return $this->container['descriptionBlock2'];
    }

    /**
     * Sets descriptionBlock2.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock $descriptionBlock2 descriptionBlock2
     */
    public function setDescriptionBlock2(?StandardTextBlock $descriptionBlock2) : self
    {
        $this->container['descriptionBlock2'] = $descriptionBlock2;

        return $this;
    }

    /**
     * Gets specificationHeadline.
     */
    public function getSpecificationHeadline() : ?TextComponent
    {
        return $this->container['specificationHeadline'];
    }

    /**
     * Sets specificationHeadline.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\TextComponent $specificationHeadline specificationHeadline
     */
    public function setSpecificationHeadline(?TextComponent $specificationHeadline) : self
    {
        $this->container['specificationHeadline'] = $specificationHeadline;

        return $this;
    }

    /**
     * Gets specificationListBlock.
     */
    public function getSpecificationListBlock() : ?StandardHeaderTextListBlock
    {
        return $this->container['specificationListBlock'];
    }

    /**
     * Sets specificationListBlock.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\StandardHeaderTextListBlock $specificationListBlock specificationListBlock
     */
    public function setSpecificationListBlock(?StandardHeaderTextListBlock $specificationListBlock) : self
    {
        $this->container['specificationListBlock'] = $specificationListBlock;

        return $this;
    }

    /**
     * Gets specificationTextBlock.
     */
    public function getSpecificationTextBlock() : ?StandardTextBlock
    {
        return $this->container['specificationTextBlock'];
    }

    /**
     * Sets specificationTextBlock.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\APlus\StandardTextBlock $specificationTextBlock specificationTextBlock
     */
    public function setSpecificationTextBlock(?StandardTextBlock $specificationTextBlock) : self
    {
        $this->container['specificationTextBlock'] = $specificationTextBlock;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
