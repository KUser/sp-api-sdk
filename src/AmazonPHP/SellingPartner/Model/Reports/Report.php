<?php declare(strict_types=1);
/**
 * Report.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Reports.
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2020-09-04
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\Reports;

use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Report implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    public const PROCESSING_STATUS_CANCELLED = 'CANCELLED';

    public const PROCESSING_STATUS_DONE = 'DONE';

    public const PROCESSING_STATUS_FATAL = 'FATAL';

    public const PROCESSING_STATUS_IN_PROGRESS = 'IN_PROGRESS';

    public const PROCESSING_STATUS_IN_QUEUE = 'IN_QUEUE';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'Report';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'marketplaceIds' => 'string[]',
        'reportId' => 'string',
        'reportType' => 'string',
        'dataStartTime' => '\DateTime',
        'dataEndTime' => '\DateTime',
        'reportScheduleId' => 'string',
        'createdTime' => '\DateTime',
        'processingStatus' => 'string',
        'processingStartTime' => '\DateTime',
        'processingEndTime' => '\DateTime',
        'reportDocumentId' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'marketplaceIds' => null,
        'reportId' => null,
        'reportType' => null,
        'dataStartTime' => 'date-time',
        'dataEndTime' => 'date-time',
        'reportScheduleId' => null,
        'createdTime' => 'date-time',
        'processingStatus' => null,
        'processingStartTime' => 'date-time',
        'processingEndTime' => 'date-time',
        'reportDocumentId' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'marketplaceIds' => 'marketplaceIds',
        'reportId' => 'reportId',
        'reportType' => 'reportType',
        'dataStartTime' => 'dataStartTime',
        'dataEndTime' => 'dataEndTime',
        'reportScheduleId' => 'reportScheduleId',
        'createdTime' => 'createdTime',
        'processingStatus' => 'processingStatus',
        'processingStartTime' => 'processingStartTime',
        'processingEndTime' => 'processingEndTime',
        'reportDocumentId' => 'reportDocumentId',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'marketplaceIds' => 'setMarketplaceIds',
        'reportId' => 'setReportId',
        'reportType' => 'setReportType',
        'dataStartTime' => 'setDataStartTime',
        'dataEndTime' => 'setDataEndTime',
        'reportScheduleId' => 'setReportScheduleId',
        'createdTime' => 'setCreatedTime',
        'processingStatus' => 'setProcessingStatus',
        'processingStartTime' => 'setProcessingStartTime',
        'processingEndTime' => 'setProcessingEndTime',
        'reportDocumentId' => 'setReportDocumentId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'marketplaceIds' => 'getMarketplaceIds',
        'reportId' => 'getReportId',
        'reportType' => 'getReportType',
        'dataStartTime' => 'getDataStartTime',
        'dataEndTime' => 'getDataEndTime',
        'reportScheduleId' => 'getReportScheduleId',
        'createdTime' => 'getCreatedTime',
        'processingStatus' => 'getProcessingStatus',
        'processingStartTime' => 'getProcessingStartTime',
        'processingEndTime' => 'getProcessingEndTime',
        'reportDocumentId' => 'getReportDocumentId',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplaceIds'] = $data['marketplaceIds'] ?? null;
        $this->container['reportId'] = $data['reportId'] ?? null;
        $this->container['reportType'] = $data['reportType'] ?? null;
        $this->container['dataStartTime'] = $data['dataStartTime'] ?? null;
        $this->container['dataEndTime'] = $data['dataEndTime'] ?? null;
        $this->container['reportScheduleId'] = $data['reportScheduleId'] ?? null;
        $this->container['createdTime'] = $data['createdTime'] ?? null;
        $this->container['processingStatus'] = $data['processingStatus'] ?? null;
        $this->container['processingStartTime'] = $data['processingStartTime'] ?? null;
        $this->container['processingEndTime'] = $data['processingEndTime'] ?? null;
        $this->container['reportDocumentId'] = $data['reportDocumentId'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getProcessingStatusAllowableValues() : array
    {
        return [
            self::PROCESSING_STATUS_CANCELLED,
            self::PROCESSING_STATUS_DONE,
            self::PROCESSING_STATUS_FATAL,
            self::PROCESSING_STATUS_IN_PROGRESS,
            self::PROCESSING_STATUS_IN_QUEUE,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['reportId'] === null) {
            $invalidProperties[] = "'reportId' can't be null";
        }

        if ($this->container['reportType'] === null) {
            $invalidProperties[] = "'reportType' can't be null";
        }

        if ($this->container['createdTime'] === null) {
            $invalidProperties[] = "'createdTime' can't be null";
        }

        if ($this->container['processingStatus'] === null) {
            $invalidProperties[] = "'processingStatus' can't be null";
        }
        $allowedValues = $this->getProcessingStatusAllowableValues();

        if (null !== $this->container['processingStatus'] && !\in_array($this->container['processingStatus'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value '%s' for 'processingStatus', must be one of '%s'",
                $this->container['processingStatus'],
                \implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets marketplaceIds.
     *
     * @return null|string[]
     */
    public function getMarketplaceIds() : ?array
    {
        return $this->container['marketplaceIds'];
    }

    /**
     * Sets marketplaceIds.
     *
     * @param null|string[] $marketplaceIds a list of marketplace identifiers for the report
     */
    public function setMarketplaceIds(?array $marketplaceIds) : self
    {
        $this->container['marketplaceIds'] = $marketplaceIds;

        return $this;
    }

    /**
     * Gets reportId.
     */
    public function getReportId() : string
    {
        return $this->container['reportId'];
    }

    /**
     * Sets reportId.
     *
     * @param string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     */
    public function setReportId(string $reportId) : self
    {
        $this->container['reportId'] = $reportId;

        return $this;
    }

    /**
     * Gets reportType.
     */
    public function getReportType() : string
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType.
     *
     * @param string $reportType the report type
     */
    public function setReportType(string $reportType) : self
    {
        $this->container['reportType'] = $reportType;

        return $this;
    }

    /**
     * Gets dataStartTime.
     */
    public function getDataStartTime() : ?\DateTime
    {
        return $this->container['dataStartTime'];
    }

    /**
     * Sets dataStartTime.
     *
     * @param null|\DateTime $dataStartTime the start of a date and time range used for selecting the data to report
     */
    public function setDataStartTime(?\DateTime $dataStartTime) : self
    {
        $this->container['dataStartTime'] = $dataStartTime;

        return $this;
    }

    /**
     * Gets dataEndTime.
     */
    public function getDataEndTime() : ?\DateTime
    {
        return $this->container['dataEndTime'];
    }

    /**
     * Sets dataEndTime.
     *
     * @param null|\DateTime $dataEndTime the end of a date and time range used for selecting the data to report
     */
    public function setDataEndTime(?\DateTime $dataEndTime) : self
    {
        $this->container['dataEndTime'] = $dataEndTime;

        return $this;
    }

    /**
     * Gets reportScheduleId.
     */
    public function getReportScheduleId() : ?string
    {
        return $this->container['reportScheduleId'];
    }

    /**
     * Sets reportScheduleId.
     *
     * @param null|string $reportScheduleId The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
     */
    public function setReportScheduleId(?string $reportScheduleId) : self
    {
        $this->container['reportScheduleId'] = $reportScheduleId;

        return $this;
    }

    /**
     * Gets createdTime.
     */
    public function getCreatedTime() : \DateTime
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime.
     *
     * @param \DateTime $createdTime the date and time when the report was created
     */
    public function setCreatedTime(\DateTime $createdTime) : self
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets processingStatus.
     */
    public function getProcessingStatus() : string
    {
        return $this->container['processingStatus'];
    }

    /**
     * Sets processingStatus.
     *
     * @param string $processingStatus the processing status of the report
     */
    public function setProcessingStatus(string $processingStatus) : self
    {
        $allowedValues = $this->getProcessingStatusAllowableValues();

        if (!\in_array($processingStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value '%s' for 'processingStatus', must be one of '%s'",
                    $processingStatus,
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processingStatus'] = $processingStatus;

        return $this;
    }

    /**
     * Gets processingStartTime.
     */
    public function getProcessingStartTime() : ?\DateTime
    {
        return $this->container['processingStartTime'];
    }

    /**
     * Sets processingStartTime.
     *
     * @param null|\DateTime $processingStartTime the date and time when the report processing started, in ISO 8601 date time format
     */
    public function setProcessingStartTime(?\DateTime $processingStartTime) : self
    {
        $this->container['processingStartTime'] = $processingStartTime;

        return $this;
    }

    /**
     * Gets processingEndTime.
     */
    public function getProcessingEndTime() : ?\DateTime
    {
        return $this->container['processingEndTime'];
    }

    /**
     * Sets processingEndTime.
     *
     * @param null|\DateTime $processingEndTime the date and time when the report processing completed, in ISO 8601 date time format
     */
    public function setProcessingEndTime(?\DateTime $processingEndTime) : self
    {
        $this->container['processingEndTime'] = $processingEndTime;

        return $this;
    }

    /**
     * Gets reportDocumentId.
     */
    public function getReportDocumentId() : ?string
    {
        return $this->container['reportDocumentId'];
    }

    /**
     * Sets reportDocumentId.
     *
     * @param null|string $reportDocumentId The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve and decrypt the report document's contents.
     */
    public function setReportDocumentId(?string $reportDocumentId) : self
    {
        $this->container['reportDocumentId'] = $reportDocumentId;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
