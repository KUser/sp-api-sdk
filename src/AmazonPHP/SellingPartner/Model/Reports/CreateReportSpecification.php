<?php declare(strict_types=1);
/**
 * CreateReportSpecification.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Reports.
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2020-09-04
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\Reports;

use AmazonPHP\SellingPartner\Model\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CreateReportSpecification implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'CreateReportSpecification';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'reportOptions' => 'array<string,string>',
        'reportType' => 'string',
        'dataStartTime' => '\DateTime',
        'dataEndTime' => '\DateTime',
        'marketplaceIds' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'reportOptions' => null,
        'reportType' => null,
        'dataStartTime' => 'date-time',
        'dataEndTime' => 'date-time',
        'marketplaceIds' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'reportOptions' => 'reportOptions',
        'reportType' => 'reportType',
        'dataStartTime' => 'dataStartTime',
        'dataEndTime' => 'dataEndTime',
        'marketplaceIds' => 'marketplaceIds',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'reportOptions' => 'setReportOptions',
        'reportType' => 'setReportType',
        'dataStartTime' => 'setDataStartTime',
        'dataEndTime' => 'setDataEndTime',
        'marketplaceIds' => 'setMarketplaceIds',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'reportOptions' => 'getReportOptions',
        'reportType' => 'getReportType',
        'dataStartTime' => 'getDataStartTime',
        'dataEndTime' => 'getDataEndTime',
        'marketplaceIds' => 'getMarketplaceIds',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reportOptions'] = $data['reportOptions'] ?? null;
        $this->container['reportType'] = $data['reportType'] ?? null;
        $this->container['dataStartTime'] = $data['dataStartTime'] ?? null;
        $this->container['dataEndTime'] = $data['dataEndTime'] ?? null;
        $this->container['marketplaceIds'] = $data['marketplaceIds'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['reportType'] === null) {
            $invalidProperties[] = "'reportType' can't be null";
        }

        if ($this->container['marketplaceIds'] === null) {
            $invalidProperties[] = "'marketplaceIds' can't be null";
        }

        if ((\count($this->container['marketplaceIds']) > 25)) {
            $invalidProperties[] = "invalid value for 'marketplaceIds', number of items must be less than or equal to 25.";
        }

        if ((\count($this->container['marketplaceIds']) < 1)) {
            $invalidProperties[] = "invalid value for 'marketplaceIds', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets reportOptions.
     *
     * @return null|array<string,string>
     */
    public function getReportOptions() : ?array
    {
        return $this->container['reportOptions'];
    }

    /**
     * Sets reportOptions.
     *
     * @param null|array<string,string> $reportOptions Additional information passed to reports. This varies by report type.
     */
    public function setReportOptions(?array $reportOptions) : self
    {
        $this->container['reportOptions'] = $reportOptions;

        return $this;
    }

    /**
     * Gets reportType.
     */
    public function getReportType() : string
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType.
     *
     * @param string $reportType the report type
     */
    public function setReportType(string $reportType) : self
    {
        $this->container['reportType'] = $reportType;

        return $this;
    }

    /**
     * Gets dataStartTime.
     */
    public function getDataStartTime() : ?\DateTime
    {
        return $this->container['dataStartTime'];
    }

    /**
     * Sets dataStartTime.
     *
     * @param null|\DateTime $dataStartTime The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     */
    public function setDataStartTime(?\DateTime $dataStartTime) : self
    {
        $this->container['dataStartTime'] = $dataStartTime;

        return $this;
    }

    /**
     * Gets dataEndTime.
     */
    public function getDataEndTime() : ?\DateTime
    {
        return $this->container['dataEndTime'];
    }

    /**
     * Sets dataEndTime.
     *
     * @param null|\DateTime $dataEndTime The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     */
    public function setDataEndTime(?\DateTime $dataEndTime) : self
    {
        $this->container['dataEndTime'] = $dataEndTime;

        return $this;
    }

    /**
     * Gets marketplaceIds.
     *
     * @return string[]
     */
    public function getMarketplaceIds() : array
    {
        return $this->container['marketplaceIds'];
    }

    /**
     * Sets marketplaceIds.
     *
     * @param string[] $marketplaceIds A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
     */
    public function setMarketplaceIds(array $marketplaceIds) : self
    {
        if ((\count($marketplaceIds) > 25)) {
            throw new \InvalidArgumentException('invalid value for $marketplaceIds when calling CreateReportSpecification., number of items must be less than or equal to 25.');
        }

        if ((\count($marketplaceIds) < 1)) {
            throw new \InvalidArgumentException('invalid length for $marketplaceIds when calling CreateReportSpecification., number of items must be greater than or equal to 1.');
        }
        $this->container['marketplaceIds'] = $marketplaceIds;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
