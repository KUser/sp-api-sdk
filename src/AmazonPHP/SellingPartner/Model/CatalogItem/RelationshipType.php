<?php declare(strict_types=1);
/**
 * RelationshipType.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items.
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\CatalogItem;

use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RelationshipType implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'RelationshipType';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'identifiers' => '\AmazonPHP\SellingPartner\Model\CatalogItem\IdentifierType',
        'color' => 'string',
        'edition' => 'string',
        'flavor' => 'string',
        'gemType' => 'string[]',
        'golfClubFlex' => 'string',
        'handOrientation' => 'string',
        'hardwarePlatform' => 'string',
        'materialType' => 'string[]',
        'metalType' => 'string',
        'model' => 'string',
        'operatingSystem' => 'string[]',
        'productTypeSubcategory' => 'string',
        'ringSize' => 'string',
        'shaftMaterial' => 'string',
        'scent' => 'string',
        'size' => 'string',
        'sizePerPearl' => 'string',
        'golfClubLoft' => '\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits',
        'totalDiamondWeight' => '\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits',
        'totalGemWeight' => '\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits',
        'packageQuantity' => 'int',
        'itemDimensions' => '\AmazonPHP\SellingPartner\Model\CatalogItem\DimensionType',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'identifiers' => null,
        'color' => null,
        'edition' => null,
        'flavor' => null,
        'gemType' => null,
        'golfClubFlex' => null,
        'handOrientation' => null,
        'hardwarePlatform' => null,
        'materialType' => null,
        'metalType' => null,
        'model' => null,
        'operatingSystem' => null,
        'productTypeSubcategory' => null,
        'ringSize' => null,
        'shaftMaterial' => null,
        'scent' => null,
        'size' => null,
        'sizePerPearl' => null,
        'golfClubLoft' => null,
        'totalDiamondWeight' => null,
        'totalGemWeight' => null,
        'packageQuantity' => null,
        'itemDimensions' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'identifiers' => 'Identifiers',
        'color' => 'Color',
        'edition' => 'Edition',
        'flavor' => 'Flavor',
        'gemType' => 'GemType',
        'golfClubFlex' => 'GolfClubFlex',
        'handOrientation' => 'HandOrientation',
        'hardwarePlatform' => 'HardwarePlatform',
        'materialType' => 'MaterialType',
        'metalType' => 'MetalType',
        'model' => 'Model',
        'operatingSystem' => 'OperatingSystem',
        'productTypeSubcategory' => 'ProductTypeSubcategory',
        'ringSize' => 'RingSize',
        'shaftMaterial' => 'ShaftMaterial',
        'scent' => 'Scent',
        'size' => 'Size',
        'sizePerPearl' => 'SizePerPearl',
        'golfClubLoft' => 'GolfClubLoft',
        'totalDiamondWeight' => 'TotalDiamondWeight',
        'totalGemWeight' => 'TotalGemWeight',
        'packageQuantity' => 'PackageQuantity',
        'itemDimensions' => 'ItemDimensions',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'identifiers' => 'setIdentifiers',
        'color' => 'setColor',
        'edition' => 'setEdition',
        'flavor' => 'setFlavor',
        'gemType' => 'setGemType',
        'golfClubFlex' => 'setGolfClubFlex',
        'handOrientation' => 'setHandOrientation',
        'hardwarePlatform' => 'setHardwarePlatform',
        'materialType' => 'setMaterialType',
        'metalType' => 'setMetalType',
        'model' => 'setModel',
        'operatingSystem' => 'setOperatingSystem',
        'productTypeSubcategory' => 'setProductTypeSubcategory',
        'ringSize' => 'setRingSize',
        'shaftMaterial' => 'setShaftMaterial',
        'scent' => 'setScent',
        'size' => 'setSize',
        'sizePerPearl' => 'setSizePerPearl',
        'golfClubLoft' => 'setGolfClubLoft',
        'totalDiamondWeight' => 'setTotalDiamondWeight',
        'totalGemWeight' => 'setTotalGemWeight',
        'packageQuantity' => 'setPackageQuantity',
        'itemDimensions' => 'setItemDimensions',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'identifiers' => 'getIdentifiers',
        'color' => 'getColor',
        'edition' => 'getEdition',
        'flavor' => 'getFlavor',
        'gemType' => 'getGemType',
        'golfClubFlex' => 'getGolfClubFlex',
        'handOrientation' => 'getHandOrientation',
        'hardwarePlatform' => 'getHardwarePlatform',
        'materialType' => 'getMaterialType',
        'metalType' => 'getMetalType',
        'model' => 'getModel',
        'operatingSystem' => 'getOperatingSystem',
        'productTypeSubcategory' => 'getProductTypeSubcategory',
        'ringSize' => 'getRingSize',
        'shaftMaterial' => 'getShaftMaterial',
        'scent' => 'getScent',
        'size' => 'getSize',
        'sizePerPearl' => 'getSizePerPearl',
        'golfClubLoft' => 'getGolfClubLoft',
        'totalDiamondWeight' => 'getTotalDiamondWeight',
        'totalGemWeight' => 'getTotalGemWeight',
        'packageQuantity' => 'getPackageQuantity',
        'itemDimensions' => 'getItemDimensions',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifiers'] = $data['identifiers'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['edition'] = $data['edition'] ?? null;
        $this->container['flavor'] = $data['flavor'] ?? null;
        $this->container['gemType'] = $data['gemType'] ?? null;
        $this->container['golfClubFlex'] = $data['golfClubFlex'] ?? null;
        $this->container['handOrientation'] = $data['handOrientation'] ?? null;
        $this->container['hardwarePlatform'] = $data['hardwarePlatform'] ?? null;
        $this->container['materialType'] = $data['materialType'] ?? null;
        $this->container['metalType'] = $data['metalType'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['operatingSystem'] = $data['operatingSystem'] ?? null;
        $this->container['productTypeSubcategory'] = $data['productTypeSubcategory'] ?? null;
        $this->container['ringSize'] = $data['ringSize'] ?? null;
        $this->container['shaftMaterial'] = $data['shaftMaterial'] ?? null;
        $this->container['scent'] = $data['scent'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['sizePerPearl'] = $data['sizePerPearl'] ?? null;
        $this->container['golfClubLoft'] = $data['golfClubLoft'] ?? null;
        $this->container['totalDiamondWeight'] = $data['totalDiamondWeight'] ?? null;
        $this->container['totalGemWeight'] = $data['totalGemWeight'] ?? null;
        $this->container['packageQuantity'] = $data['packageQuantity'] ?? null;
        $this->container['itemDimensions'] = $data['itemDimensions'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets identifiers.
     */
    public function getIdentifiers() : ?IdentifierType
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItem\IdentifierType $identifiers identifiers
     */
    public function setIdentifiers(?IdentifierType $identifiers) : self
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets color.
     */
    public function getColor() : ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color.
     *
     * @param null|string $color the color variation of the item
     */
    public function setColor(?string $color) : self
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets edition.
     */
    public function getEdition() : ?string
    {
        return $this->container['edition'];
    }

    /**
     * Sets edition.
     *
     * @param null|string $edition the edition variation of the item
     */
    public function setEdition(?string $edition) : self
    {
        $this->container['edition'] = $edition;

        return $this;
    }

    /**
     * Gets flavor.
     */
    public function getFlavor() : ?string
    {
        return $this->container['flavor'];
    }

    /**
     * Sets flavor.
     *
     * @param null|string $flavor the flavor variation of the item
     */
    public function setFlavor(?string $flavor) : self
    {
        $this->container['flavor'] = $flavor;

        return $this;
    }

    /**
     * Gets gemType.
     *
     * @return null|string[]
     */
    public function getGemType() : ?array
    {
        return $this->container['gemType'];
    }

    /**
     * Sets gemType.
     *
     * @param null|string[] $gemType the gem type variations of the item
     */
    public function setGemType(?array $gemType) : self
    {
        $this->container['gemType'] = $gemType;

        return $this;
    }

    /**
     * Gets golfClubFlex.
     */
    public function getGolfClubFlex() : ?string
    {
        return $this->container['golfClubFlex'];
    }

    /**
     * Sets golfClubFlex.
     *
     * @param null|string $golfClubFlex the golf club flex variation of an item
     */
    public function setGolfClubFlex(?string $golfClubFlex) : self
    {
        $this->container['golfClubFlex'] = $golfClubFlex;

        return $this;
    }

    /**
     * Gets handOrientation.
     */
    public function getHandOrientation() : ?string
    {
        return $this->container['handOrientation'];
    }

    /**
     * Sets handOrientation.
     *
     * @param null|string $handOrientation the hand orientation variation of an item
     */
    public function setHandOrientation(?string $handOrientation) : self
    {
        $this->container['handOrientation'] = $handOrientation;

        return $this;
    }

    /**
     * Gets hardwarePlatform.
     */
    public function getHardwarePlatform() : ?string
    {
        return $this->container['hardwarePlatform'];
    }

    /**
     * Sets hardwarePlatform.
     *
     * @param null|string $hardwarePlatform the hardware platform variation of an item
     */
    public function setHardwarePlatform(?string $hardwarePlatform) : self
    {
        $this->container['hardwarePlatform'] = $hardwarePlatform;

        return $this;
    }

    /**
     * Gets materialType.
     *
     * @return null|string[]
     */
    public function getMaterialType() : ?array
    {
        return $this->container['materialType'];
    }

    /**
     * Sets materialType.
     *
     * @param null|string[] $materialType the material type variations of an item
     */
    public function setMaterialType(?array $materialType) : self
    {
        $this->container['materialType'] = $materialType;

        return $this;
    }

    /**
     * Gets metalType.
     */
    public function getMetalType() : ?string
    {
        return $this->container['metalType'];
    }

    /**
     * Sets metalType.
     *
     * @param null|string $metalType the metal type variation of an item
     */
    public function setMetalType(?string $metalType) : self
    {
        $this->container['metalType'] = $metalType;

        return $this;
    }

    /**
     * Gets model.
     */
    public function getModel() : ?string
    {
        return $this->container['model'];
    }

    /**
     * Sets model.
     *
     * @param null|string $model the model variation of an item
     */
    public function setModel(?string $model) : self
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets operatingSystem.
     *
     * @return null|string[]
     */
    public function getOperatingSystem() : ?array
    {
        return $this->container['operatingSystem'];
    }

    /**
     * Sets operatingSystem.
     *
     * @param null|string[] $operatingSystem the operating system variations of an item
     */
    public function setOperatingSystem(?array $operatingSystem) : self
    {
        $this->container['operatingSystem'] = $operatingSystem;

        return $this;
    }

    /**
     * Gets productTypeSubcategory.
     */
    public function getProductTypeSubcategory() : ?string
    {
        return $this->container['productTypeSubcategory'];
    }

    /**
     * Sets productTypeSubcategory.
     *
     * @param null|string $productTypeSubcategory the product type subcategory variation of an item
     */
    public function setProductTypeSubcategory(?string $productTypeSubcategory) : self
    {
        $this->container['productTypeSubcategory'] = $productTypeSubcategory;

        return $this;
    }

    /**
     * Gets ringSize.
     */
    public function getRingSize() : ?string
    {
        return $this->container['ringSize'];
    }

    /**
     * Sets ringSize.
     *
     * @param null|string $ringSize the ring size variation of an item
     */
    public function setRingSize(?string $ringSize) : self
    {
        $this->container['ringSize'] = $ringSize;

        return $this;
    }

    /**
     * Gets shaftMaterial.
     */
    public function getShaftMaterial() : ?string
    {
        return $this->container['shaftMaterial'];
    }

    /**
     * Sets shaftMaterial.
     *
     * @param null|string $shaftMaterial the shaft material variation of an item
     */
    public function setShaftMaterial(?string $shaftMaterial) : self
    {
        $this->container['shaftMaterial'] = $shaftMaterial;

        return $this;
    }

    /**
     * Gets scent.
     */
    public function getScent() : ?string
    {
        return $this->container['scent'];
    }

    /**
     * Sets scent.
     *
     * @param null|string $scent the scent variation of an item
     */
    public function setScent(?string $scent) : self
    {
        $this->container['scent'] = $scent;

        return $this;
    }

    /**
     * Gets size.
     */
    public function getSize() : ?string
    {
        return $this->container['size'];
    }

    /**
     * Sets size.
     *
     * @param null|string $size the size variation of an item
     */
    public function setSize(?string $size) : self
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets sizePerPearl.
     */
    public function getSizePerPearl() : ?string
    {
        return $this->container['sizePerPearl'];
    }

    /**
     * Sets sizePerPearl.
     *
     * @param null|string $sizePerPearl the size per pearl variation of an item
     */
    public function setSizePerPearl(?string $sizePerPearl) : self
    {
        $this->container['sizePerPearl'] = $sizePerPearl;

        return $this;
    }

    /**
     * Gets golfClubLoft.
     */
    public function getGolfClubLoft() : ?DecimalWithUnits
    {
        return $this->container['golfClubLoft'];
    }

    /**
     * Sets golfClubLoft.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits $golfClubLoft golfClubLoft
     */
    public function setGolfClubLoft(?DecimalWithUnits $golfClubLoft) : self
    {
        $this->container['golfClubLoft'] = $golfClubLoft;

        return $this;
    }

    /**
     * Gets totalDiamondWeight.
     */
    public function getTotalDiamondWeight() : ?DecimalWithUnits
    {
        return $this->container['totalDiamondWeight'];
    }

    /**
     * Sets totalDiamondWeight.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits $totalDiamondWeight totalDiamondWeight
     */
    public function setTotalDiamondWeight(?DecimalWithUnits $totalDiamondWeight) : self
    {
        $this->container['totalDiamondWeight'] = $totalDiamondWeight;

        return $this;
    }

    /**
     * Gets totalGemWeight.
     */
    public function getTotalGemWeight() : ?DecimalWithUnits
    {
        return $this->container['totalGemWeight'];
    }

    /**
     * Sets totalGemWeight.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItem\DecimalWithUnits $totalGemWeight totalGemWeight
     */
    public function setTotalGemWeight(?DecimalWithUnits $totalGemWeight) : self
    {
        $this->container['totalGemWeight'] = $totalGemWeight;

        return $this;
    }

    /**
     * Gets packageQuantity.
     */
    public function getPackageQuantity() : ?int
    {
        return $this->container['packageQuantity'];
    }

    /**
     * Sets packageQuantity.
     *
     * @param null|int $packageQuantity the package quantity variation of an item
     */
    public function setPackageQuantity(?int $packageQuantity) : self
    {
        $this->container['packageQuantity'] = $packageQuantity;

        return $this;
    }

    /**
     * Gets itemDimensions.
     */
    public function getItemDimensions() : ?DimensionType
    {
        return $this->container['itemDimensions'];
    }

    /**
     * Sets itemDimensions.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItem\DimensionType $itemDimensions itemDimensions
     */
    public function setItemDimensions(?DimensionType $itemDimensions) : self
    {
        $this->container['itemDimensions'] = $itemDimensions;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
