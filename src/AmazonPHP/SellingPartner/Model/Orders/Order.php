<?php declare(strict_types=1);
/**
 * Order.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders.
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\Orders;

use AmazonPHP\SellingPartner\Model\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Order implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    public const ORDER_STATUS_PENDING = 'Pending';

    public const ORDER_STATUS_UNSHIPPED = 'Unshipped';

    public const ORDER_STATUS_PARTIALLY_SHIPPED = 'PartiallyShipped';

    public const ORDER_STATUS_SHIPPED = 'Shipped';

    public const ORDER_STATUS_CANCELED = 'Canceled';

    public const ORDER_STATUS_UNFULFILLABLE = 'Unfulfillable';

    public const ORDER_STATUS_INVOICE_UNCONFIRMED = 'InvoiceUnconfirmed';

    public const ORDER_STATUS_PENDING_AVAILABILITY = 'PendingAvailability';

    public const FULFILLMENT_CHANNEL_MFN = 'MFN';

    public const FULFILLMENT_CHANNEL_AFN = 'AFN';

    public const PAYMENT_METHOD_COD = 'COD';

    public const PAYMENT_METHOD_CVS = 'CVS';

    public const PAYMENT_METHOD_OTHER = 'Other';

    public const ORDER_TYPE_STANDARD_ORDER = 'StandardOrder';

    public const ORDER_TYPE_LONG_LEAD_TIME_ORDER = 'LongLeadTimeOrder';

    public const ORDER_TYPE_PREORDER = 'Preorder';

    public const ORDER_TYPE_BACK_ORDER = 'BackOrder';

    public const ORDER_TYPE_SOURCING_ON_DEMAND_ORDER = 'SourcingOnDemandOrder';

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'Order';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'amazonOrderId' => 'string',
        'sellerOrderId' => 'string',
        'purchaseDate' => 'string',
        'lastUpdateDate' => 'string',
        'orderStatus' => 'string',
        'fulfillmentChannel' => 'string',
        'salesChannel' => 'string',
        'orderChannel' => 'string',
        'shipServiceLevel' => 'string',
        'orderTotal' => '\AmazonPHP\SellingPartner\Model\Orders\Money',
        'numberOfItemsShipped' => 'int',
        'numberOfItemsUnshipped' => 'int',
        'paymentExecutionDetail' => '\AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[]',
        'paymentMethod' => 'string',
        'paymentMethodDetails' => 'string[]',
        'marketplaceId' => 'string',
        'shipmentServiceLevelCategory' => 'string',
        'easyShipShipmentStatus' => 'string',
        'cbaDisplayableShippingLabel' => 'string',
        'orderType' => 'string',
        'earliestShipDate' => 'string',
        'latestShipDate' => 'string',
        'earliestDeliveryDate' => 'string',
        'latestDeliveryDate' => 'string',
        'isBusinessOrder' => 'bool',
        'isPrime' => 'bool',
        'isPremiumOrder' => 'bool',
        'isGlobalExpressEnabled' => 'bool',
        'replacedOrderId' => 'string',
        'isReplacementOrder' => 'bool',
        'promiseResponseDueDate' => 'string',
        'isEstimatedShipDateSet' => 'bool',
        'isSoldByAB' => 'bool',
        'defaultShipFromLocationAddress' => '\AmazonPHP\SellingPartner\Model\Orders\Address',
        'fulfillmentInstruction' => '\AmazonPHP\SellingPartner\Model\Orders\FulfillmentInstruction',
        'isISPU' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'amazonOrderId' => null,
        'sellerOrderId' => null,
        'purchaseDate' => null,
        'lastUpdateDate' => null,
        'orderStatus' => null,
        'fulfillmentChannel' => null,
        'salesChannel' => null,
        'orderChannel' => null,
        'shipServiceLevel' => null,
        'orderTotal' => null,
        'numberOfItemsShipped' => null,
        'numberOfItemsUnshipped' => null,
        'paymentExecutionDetail' => null,
        'paymentMethod' => null,
        'paymentMethodDetails' => null,
        'marketplaceId' => null,
        'shipmentServiceLevelCategory' => null,
        'easyShipShipmentStatus' => null,
        'cbaDisplayableShippingLabel' => null,
        'orderType' => null,
        'earliestShipDate' => null,
        'latestShipDate' => null,
        'earliestDeliveryDate' => null,
        'latestDeliveryDate' => null,
        'isBusinessOrder' => null,
        'isPrime' => null,
        'isPremiumOrder' => null,
        'isGlobalExpressEnabled' => null,
        'replacedOrderId' => null,
        'isReplacementOrder' => null,
        'promiseResponseDueDate' => null,
        'isEstimatedShipDateSet' => null,
        'isSoldByAB' => null,
        'defaultShipFromLocationAddress' => null,
        'fulfillmentInstruction' => null,
        'isISPU' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'amazonOrderId' => 'AmazonOrderId',
        'sellerOrderId' => 'SellerOrderId',
        'purchaseDate' => 'PurchaseDate',
        'lastUpdateDate' => 'LastUpdateDate',
        'orderStatus' => 'OrderStatus',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'salesChannel' => 'SalesChannel',
        'orderChannel' => 'OrderChannel',
        'shipServiceLevel' => 'ShipServiceLevel',
        'orderTotal' => 'OrderTotal',
        'numberOfItemsShipped' => 'NumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'NumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'PaymentExecutionDetail',
        'paymentMethod' => 'PaymentMethod',
        'paymentMethodDetails' => 'PaymentMethodDetails',
        'marketplaceId' => 'MarketplaceId',
        'shipmentServiceLevelCategory' => 'ShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'EasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'CbaDisplayableShippingLabel',
        'orderType' => 'OrderType',
        'earliestShipDate' => 'EarliestShipDate',
        'latestShipDate' => 'LatestShipDate',
        'earliestDeliveryDate' => 'EarliestDeliveryDate',
        'latestDeliveryDate' => 'LatestDeliveryDate',
        'isBusinessOrder' => 'IsBusinessOrder',
        'isPrime' => 'IsPrime',
        'isPremiumOrder' => 'IsPremiumOrder',
        'isGlobalExpressEnabled' => 'IsGlobalExpressEnabled',
        'replacedOrderId' => 'ReplacedOrderId',
        'isReplacementOrder' => 'IsReplacementOrder',
        'promiseResponseDueDate' => 'PromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'IsEstimatedShipDateSet',
        'isSoldByAB' => 'IsSoldByAB',
        'defaultShipFromLocationAddress' => 'DefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'FulfillmentInstruction',
        'isISPU' => 'IsISPU',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'amazonOrderId' => 'setAmazonOrderId',
        'sellerOrderId' => 'setSellerOrderId',
        'purchaseDate' => 'setPurchaseDate',
        'lastUpdateDate' => 'setLastUpdateDate',
        'orderStatus' => 'setOrderStatus',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'salesChannel' => 'setSalesChannel',
        'orderChannel' => 'setOrderChannel',
        'shipServiceLevel' => 'setShipServiceLevel',
        'orderTotal' => 'setOrderTotal',
        'numberOfItemsShipped' => 'setNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'setNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'setPaymentExecutionDetail',
        'paymentMethod' => 'setPaymentMethod',
        'paymentMethodDetails' => 'setPaymentMethodDetails',
        'marketplaceId' => 'setMarketplaceId',
        'shipmentServiceLevelCategory' => 'setShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'setEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'setCbaDisplayableShippingLabel',
        'orderType' => 'setOrderType',
        'earliestShipDate' => 'setEarliestShipDate',
        'latestShipDate' => 'setLatestShipDate',
        'earliestDeliveryDate' => 'setEarliestDeliveryDate',
        'latestDeliveryDate' => 'setLatestDeliveryDate',
        'isBusinessOrder' => 'setIsBusinessOrder',
        'isPrime' => 'setIsPrime',
        'isPremiumOrder' => 'setIsPremiumOrder',
        'isGlobalExpressEnabled' => 'setIsGlobalExpressEnabled',
        'replacedOrderId' => 'setReplacedOrderId',
        'isReplacementOrder' => 'setIsReplacementOrder',
        'promiseResponseDueDate' => 'setPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'setIsEstimatedShipDateSet',
        'isSoldByAB' => 'setIsSoldByAB',
        'defaultShipFromLocationAddress' => 'setDefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'setFulfillmentInstruction',
        'isISPU' => 'setIsISPU',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'amazonOrderId' => 'getAmazonOrderId',
        'sellerOrderId' => 'getSellerOrderId',
        'purchaseDate' => 'getPurchaseDate',
        'lastUpdateDate' => 'getLastUpdateDate',
        'orderStatus' => 'getOrderStatus',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'salesChannel' => 'getSalesChannel',
        'orderChannel' => 'getOrderChannel',
        'shipServiceLevel' => 'getShipServiceLevel',
        'orderTotal' => 'getOrderTotal',
        'numberOfItemsShipped' => 'getNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'getNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'getPaymentExecutionDetail',
        'paymentMethod' => 'getPaymentMethod',
        'paymentMethodDetails' => 'getPaymentMethodDetails',
        'marketplaceId' => 'getMarketplaceId',
        'shipmentServiceLevelCategory' => 'getShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'getEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'getCbaDisplayableShippingLabel',
        'orderType' => 'getOrderType',
        'earliestShipDate' => 'getEarliestShipDate',
        'latestShipDate' => 'getLatestShipDate',
        'earliestDeliveryDate' => 'getEarliestDeliveryDate',
        'latestDeliveryDate' => 'getLatestDeliveryDate',
        'isBusinessOrder' => 'getIsBusinessOrder',
        'isPrime' => 'getIsPrime',
        'isPremiumOrder' => 'getIsPremiumOrder',
        'isGlobalExpressEnabled' => 'getIsGlobalExpressEnabled',
        'replacedOrderId' => 'getReplacedOrderId',
        'isReplacementOrder' => 'getIsReplacementOrder',
        'promiseResponseDueDate' => 'getPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'getIsEstimatedShipDateSet',
        'isSoldByAB' => 'getIsSoldByAB',
        'defaultShipFromLocationAddress' => 'getDefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'getFulfillmentInstruction',
        'isISPU' => 'getIsISPU',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amazonOrderId'] = $data['amazonOrderId'] ?? null;
        $this->container['sellerOrderId'] = $data['sellerOrderId'] ?? null;
        $this->container['purchaseDate'] = $data['purchaseDate'] ?? null;
        $this->container['lastUpdateDate'] = $data['lastUpdateDate'] ?? null;
        $this->container['orderStatus'] = $data['orderStatus'] ?? null;
        $this->container['fulfillmentChannel'] = $data['fulfillmentChannel'] ?? null;
        $this->container['salesChannel'] = $data['salesChannel'] ?? null;
        $this->container['orderChannel'] = $data['orderChannel'] ?? null;
        $this->container['shipServiceLevel'] = $data['shipServiceLevel'] ?? null;
        $this->container['orderTotal'] = $data['orderTotal'] ?? null;
        $this->container['numberOfItemsShipped'] = $data['numberOfItemsShipped'] ?? null;
        $this->container['numberOfItemsUnshipped'] = $data['numberOfItemsUnshipped'] ?? null;
        $this->container['paymentExecutionDetail'] = $data['paymentExecutionDetail'] ?? null;
        $this->container['paymentMethod'] = $data['paymentMethod'] ?? null;
        $this->container['paymentMethodDetails'] = $data['paymentMethodDetails'] ?? null;
        $this->container['marketplaceId'] = $data['marketplaceId'] ?? null;
        $this->container['shipmentServiceLevelCategory'] = $data['shipmentServiceLevelCategory'] ?? null;
        $this->container['easyShipShipmentStatus'] = $data['easyShipShipmentStatus'] ?? null;
        $this->container['cbaDisplayableShippingLabel'] = $data['cbaDisplayableShippingLabel'] ?? null;
        $this->container['orderType'] = $data['orderType'] ?? null;
        $this->container['earliestShipDate'] = $data['earliestShipDate'] ?? null;
        $this->container['latestShipDate'] = $data['latestShipDate'] ?? null;
        $this->container['earliestDeliveryDate'] = $data['earliestDeliveryDate'] ?? null;
        $this->container['latestDeliveryDate'] = $data['latestDeliveryDate'] ?? null;
        $this->container['isBusinessOrder'] = $data['isBusinessOrder'] ?? null;
        $this->container['isPrime'] = $data['isPrime'] ?? null;
        $this->container['isPremiumOrder'] = $data['isPremiumOrder'] ?? null;
        $this->container['isGlobalExpressEnabled'] = $data['isGlobalExpressEnabled'] ?? null;
        $this->container['replacedOrderId'] = $data['replacedOrderId'] ?? null;
        $this->container['isReplacementOrder'] = $data['isReplacementOrder'] ?? null;
        $this->container['promiseResponseDueDate'] = $data['promiseResponseDueDate'] ?? null;
        $this->container['isEstimatedShipDateSet'] = $data['isEstimatedShipDateSet'] ?? null;
        $this->container['isSoldByAB'] = $data['isSoldByAB'] ?? null;
        $this->container['defaultShipFromLocationAddress'] = $data['defaultShipFromLocationAddress'] ?? null;
        $this->container['fulfillmentInstruction'] = $data['fulfillmentInstruction'] ?? null;
        $this->container['isISPU'] = $data['isISPU'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues() : array
    {
        return [
            self::ORDER_STATUS_PENDING,
            self::ORDER_STATUS_UNSHIPPED,
            self::ORDER_STATUS_PARTIALLY_SHIPPED,
            self::ORDER_STATUS_SHIPPED,
            self::ORDER_STATUS_CANCELED,
            self::ORDER_STATUS_UNFULFILLABLE,
            self::ORDER_STATUS_INVOICE_UNCONFIRMED,
            self::ORDER_STATUS_PENDING_AVAILABILITY,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getFulfillmentChannelAllowableValues() : array
    {
        return [
            self::FULFILLMENT_CHANNEL_MFN,
            self::FULFILLMENT_CHANNEL_AFN,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues() : array
    {
        return [
            self::PAYMENT_METHOD_COD,
            self::PAYMENT_METHOD_CVS,
            self::PAYMENT_METHOD_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues() : array
    {
        return [
            self::ORDER_TYPE_STANDARD_ORDER,
            self::ORDER_TYPE_LONG_LEAD_TIME_ORDER,
            self::ORDER_TYPE_PREORDER,
            self::ORDER_TYPE_BACK_ORDER,
            self::ORDER_TYPE_SOURCING_ON_DEMAND_ORDER,
        ];
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['amazonOrderId'] === null) {
            $invalidProperties[] = "'amazonOrderId' can't be null";
        }

        if ($this->container['purchaseDate'] === null) {
            $invalidProperties[] = "'purchaseDate' can't be null";
        }

        if ($this->container['lastUpdateDate'] === null) {
            $invalidProperties[] = "'lastUpdateDate' can't be null";
        }

        if ($this->container['orderStatus'] === null) {
            $invalidProperties[] = "'orderStatus' can't be null";
        }
        $allowedValues = $this->getOrderStatusAllowableValues();

        if (null !== $this->container['orderStatus'] && !\in_array($this->container['orderStatus'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value '%s' for 'orderStatus', must be one of '%s'",
                $this->container['orderStatus'],
                \implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFulfillmentChannelAllowableValues();

        if (null !== $this->container['fulfillmentChannel'] && !\in_array($this->container['fulfillmentChannel'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value '%s' for 'fulfillmentChannel', must be one of '%s'",
                $this->container['fulfillmentChannel'],
                \implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();

        if (null !== $this->container['paymentMethod'] && !\in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value '%s' for 'paymentMethod', must be one of '%s'",
                $this->container['paymentMethod'],
                \implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();

        if (null !== $this->container['orderType'] && !\in_array($this->container['orderType'], $allowedValues, true)) {
            $invalidProperties[] = \sprintf(
                "invalid value '%s' for 'orderType', must be one of '%s'",
                $this->container['orderType'],
                \implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets amazonOrderId.
     */
    public function getAmazonOrderId() : string
    {
        return $this->container['amazonOrderId'];
    }

    /**
     * Sets amazonOrderId.
     *
     * @param string $amazonOrderId an Amazon-defined order identifier, in 3-7-7 format
     */
    public function setAmazonOrderId(string $amazonOrderId) : self
    {
        $this->container['amazonOrderId'] = $amazonOrderId;

        return $this;
    }

    /**
     * Gets sellerOrderId.
     */
    public function getSellerOrderId() : ?string
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId.
     *
     * @param null|string $sellerOrderId a seller-defined order identifier
     */
    public function setSellerOrderId(?string $sellerOrderId) : self
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets purchaseDate.
     */
    public function getPurchaseDate() : string
    {
        return $this->container['purchaseDate'];
    }

    /**
     * Sets purchaseDate.
     *
     * @param string $purchaseDate the date when the order was created
     */
    public function setPurchaseDate(string $purchaseDate) : self
    {
        $this->container['purchaseDate'] = $purchaseDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate.
     */
    public function getLastUpdateDate() : string
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate.
     *
     * @param string $lastUpdateDate The date when the order was last updated.  Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
     */
    public function setLastUpdateDate(string $lastUpdateDate) : self
    {
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets orderStatus.
     */
    public function getOrderStatus() : string
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus.
     *
     * @param string $orderStatus the current order status
     */
    public function setOrderStatus(string $orderStatus) : self
    {
        $allowedValues = $this->getOrderStatusAllowableValues();

        if (!\in_array($orderStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value '%s' for 'orderStatus', must be one of '%s'",
                    $orderStatus,
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets fulfillmentChannel.
     */
    public function getFulfillmentChannel() : ?string
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel.
     *
     * @param null|string $fulfillmentChannel whether the order was fulfilled by Amazon (AFN) or by the seller (MFN)
     */
    public function setFulfillmentChannel(?string $fulfillmentChannel) : self
    {
        $allowedValues = $this->getFulfillmentChannelAllowableValues();

        if (null !== $fulfillmentChannel && !\in_array($fulfillmentChannel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value '%s' for 'fulfillmentChannel', must be one of '%s'",
                    $fulfillmentChannel,
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets salesChannel.
     */
    public function getSalesChannel() : ?string
    {
        return $this->container['salesChannel'];
    }

    /**
     * Sets salesChannel.
     *
     * @param null|string $salesChannel the sales channel of the first item in the order
     */
    public function setSalesChannel(?string $salesChannel) : self
    {
        $this->container['salesChannel'] = $salesChannel;

        return $this;
    }

    /**
     * Gets orderChannel.
     */
    public function getOrderChannel() : ?string
    {
        return $this->container['orderChannel'];
    }

    /**
     * Sets orderChannel.
     *
     * @param null|string $orderChannel the order channel of the first item in the order
     */
    public function setOrderChannel(?string $orderChannel) : self
    {
        $this->container['orderChannel'] = $orderChannel;

        return $this;
    }

    /**
     * Gets shipServiceLevel.
     */
    public function getShipServiceLevel() : ?string
    {
        return $this->container['shipServiceLevel'];
    }

    /**
     * Sets shipServiceLevel.
     *
     * @param null|string $shipServiceLevel the shipment service level of the order
     */
    public function setShipServiceLevel(?string $shipServiceLevel) : self
    {
        $this->container['shipServiceLevel'] = $shipServiceLevel;

        return $this;
    }

    /**
     * Gets orderTotal.
     */
    public function getOrderTotal() : ?Money
    {
        return $this->container['orderTotal'];
    }

    /**
     * Sets orderTotal.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\Money $orderTotal orderTotal
     */
    public function setOrderTotal(?Money $orderTotal) : self
    {
        $this->container['orderTotal'] = $orderTotal;

        return $this;
    }

    /**
     * Gets numberOfItemsShipped.
     */
    public function getNumberOfItemsShipped() : ?int
    {
        return $this->container['numberOfItemsShipped'];
    }

    /**
     * Sets numberOfItemsShipped.
     *
     * @param null|int $numberOfItemsShipped the number of items shipped
     */
    public function setNumberOfItemsShipped(?int $numberOfItemsShipped) : self
    {
        $this->container['numberOfItemsShipped'] = $numberOfItemsShipped;

        return $this;
    }

    /**
     * Gets numberOfItemsUnshipped.
     */
    public function getNumberOfItemsUnshipped() : ?int
    {
        return $this->container['numberOfItemsUnshipped'];
    }

    /**
     * Sets numberOfItemsUnshipped.
     *
     * @param null|int $numberOfItemsUnshipped the number of items unshipped
     */
    public function setNumberOfItemsUnshipped(?int $numberOfItemsUnshipped) : self
    {
        $this->container['numberOfItemsUnshipped'] = $numberOfItemsUnshipped;

        return $this;
    }

    /**
     * Gets paymentExecutionDetail.
     *
     * @return null|\AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[]
     */
    public function getPaymentExecutionDetail() : ?array
    {
        return $this->container['paymentExecutionDetail'];
    }

    /**
     * Sets paymentExecutionDetail.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[] $paymentExecutionDetail a list of payment execution detail items
     */
    public function setPaymentExecutionDetail(?array $paymentExecutionDetail) : self
    {
        $this->container['paymentExecutionDetail'] = $paymentExecutionDetail;

        return $this;
    }

    /**
     * Gets paymentMethod.
     */
    public function getPaymentMethod() : ?string
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod.
     *
     * @param null|string $paymentMethod The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
     */
    public function setPaymentMethod(?string $paymentMethod) : self
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();

        if (null !== $paymentMethod && !\in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value '%s' for 'paymentMethod', must be one of '%s'",
                    $paymentMethod,
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets paymentMethodDetails.
     *
     * @return null|string[]
     */
    public function getPaymentMethodDetails() : ?array
    {
        return $this->container['paymentMethodDetails'];
    }

    /**
     * Sets paymentMethodDetails.
     *
     * @param null|string[] $paymentMethodDetails a list of payment method detail items
     */
    public function setPaymentMethodDetails(?array $paymentMethodDetails) : self
    {
        $this->container['paymentMethodDetails'] = $paymentMethodDetails;

        return $this;
    }

    /**
     * Gets marketplaceId.
     */
    public function getMarketplaceId() : ?string
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId.
     *
     * @param null|string $marketplaceId the identifier for the marketplace where the order was placed
     */
    public function setMarketplaceId(?string $marketplaceId) : self
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets shipmentServiceLevelCategory.
     */
    public function getShipmentServiceLevelCategory() : ?string
    {
        return $this->container['shipmentServiceLevelCategory'];
    }

    /**
     * Sets shipmentServiceLevelCategory.
     *
     * @param null|string $shipmentServiceLevelCategory The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
     */
    public function setShipmentServiceLevelCategory(?string $shipmentServiceLevelCategory) : self
    {
        $this->container['shipmentServiceLevelCategory'] = $shipmentServiceLevelCategory;

        return $this;
    }

    /**
     * Gets easyShipShipmentStatus.
     */
    public function getEasyShipShipmentStatus() : ?string
    {
        return $this->container['easyShipShipmentStatus'];
    }

    /**
     * Sets easyShipShipmentStatus.
     *
     * @param null|string $easyShipShipmentStatus The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.  Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
     */
    public function setEasyShipShipmentStatus(?string $easyShipShipmentStatus) : self
    {
        $this->container['easyShipShipmentStatus'] = $easyShipShipmentStatus;

        return $this;
    }

    /**
     * Gets cbaDisplayableShippingLabel.
     */
    public function getCbaDisplayableShippingLabel() : ?string
    {
        return $this->container['cbaDisplayableShippingLabel'];
    }

    /**
     * Sets cbaDisplayableShippingLabel.
     *
     * @param null|string $cbaDisplayableShippingLabel custom ship label for Checkout by Amazon (CBA)
     */
    public function setCbaDisplayableShippingLabel(?string $cbaDisplayableShippingLabel) : self
    {
        $this->container['cbaDisplayableShippingLabel'] = $cbaDisplayableShippingLabel;

        return $this;
    }

    /**
     * Gets orderType.
     */
    public function getOrderType() : ?string
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType.
     *
     * @param null|string $orderType the type of the order
     */
    public function setOrderType(?string $orderType) : self
    {
        $allowedValues = $this->getOrderTypeAllowableValues();

        if (null !== $orderType && !\in_array($orderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                \sprintf(
                    "Invalid value '%s' for 'orderType', must be one of '%s'",
                    $orderType,
                    \implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets earliestShipDate.
     */
    public function getEarliestShipDate() : ?string
    {
        return $this->container['earliestShipDate'];
    }

    /**
     * Sets earliestShipDate.
     *
     * @param null|string $earliestShipDate The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
     */
    public function setEarliestShipDate(?string $earliestShipDate) : self
    {
        $this->container['earliestShipDate'] = $earliestShipDate;

        return $this;
    }

    /**
     * Gets latestShipDate.
     */
    public function getLatestShipDate() : ?string
    {
        return $this->container['latestShipDate'];
    }

    /**
     * Sets latestShipDate.
     *
     * @param null|string $latestShipDate The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
     */
    public function setLatestShipDate(?string $latestShipDate) : self
    {
        $this->container['latestShipDate'] = $latestShipDate;

        return $this;
    }

    /**
     * Gets earliestDeliveryDate.
     */
    public function getEarliestDeliveryDate() : ?string
    {
        return $this->container['earliestDeliveryDate'];
    }

    /**
     * Sets earliestDeliveryDate.
     *
     * @param null|string $earliestDeliveryDate The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
     */
    public function setEarliestDeliveryDate(?string $earliestDeliveryDate) : self
    {
        $this->container['earliestDeliveryDate'] = $earliestDeliveryDate;

        return $this;
    }

    /**
     * Gets latestDeliveryDate.
     */
    public function getLatestDeliveryDate() : ?string
    {
        return $this->container['latestDeliveryDate'];
    }

    /**
     * Sets latestDeliveryDate.
     *
     * @param null|string $latestDeliveryDate The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
     */
    public function setLatestDeliveryDate(?string $latestDeliveryDate) : self
    {
        $this->container['latestDeliveryDate'] = $latestDeliveryDate;

        return $this;
    }

    /**
     * Gets isBusinessOrder.
     */
    public function getIsBusinessOrder() : ?bool
    {
        return $this->container['isBusinessOrder'];
    }

    /**
     * Sets isBusinessOrder.
     *
     * @param null|bool $isBusinessOrder When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
     */
    public function setIsBusinessOrder(?bool $isBusinessOrder) : self
    {
        $this->container['isBusinessOrder'] = $isBusinessOrder;

        return $this;
    }

    /**
     * Gets isPrime.
     */
    public function getIsPrime() : ?bool
    {
        return $this->container['isPrime'];
    }

    /**
     * Sets isPrime.
     *
     * @param null|bool $isPrime when true, the order is a seller-fulfilled Amazon Prime order
     */
    public function setIsPrime(?bool $isPrime) : self
    {
        $this->container['isPrime'] = $isPrime;

        return $this;
    }

    /**
     * Gets isPremiumOrder.
     */
    public function getIsPremiumOrder() : ?bool
    {
        return $this->container['isPremiumOrder'];
    }

    /**
     * Sets isPremiumOrder.
     *
     * @param null|bool $isPremiumOrder When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
     */
    public function setIsPremiumOrder(?bool $isPremiumOrder) : self
    {
        $this->container['isPremiumOrder'] = $isPremiumOrder;

        return $this;
    }

    /**
     * Gets isGlobalExpressEnabled.
     */
    public function getIsGlobalExpressEnabled() : ?bool
    {
        return $this->container['isGlobalExpressEnabled'];
    }

    /**
     * Sets isGlobalExpressEnabled.
     *
     * @param null|bool $isGlobalExpressEnabled when true, the order is a GlobalExpress order
     */
    public function setIsGlobalExpressEnabled(?bool $isGlobalExpressEnabled) : self
    {
        $this->container['isGlobalExpressEnabled'] = $isGlobalExpressEnabled;

        return $this;
    }

    /**
     * Gets replacedOrderId.
     */
    public function getReplacedOrderId() : ?string
    {
        return $this->container['replacedOrderId'];
    }

    /**
     * Sets replacedOrderId.
     *
     * @param null|string $replacedOrderId The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
     */
    public function setReplacedOrderId(?string $replacedOrderId) : self
    {
        $this->container['replacedOrderId'] = $replacedOrderId;

        return $this;
    }

    /**
     * Gets isReplacementOrder.
     */
    public function getIsReplacementOrder() : ?bool
    {
        return $this->container['isReplacementOrder'];
    }

    /**
     * Sets isReplacementOrder.
     *
     * @param null|bool $isReplacementOrder when true, this is a replacement order
     */
    public function setIsReplacementOrder(?bool $isReplacementOrder) : self
    {
        $this->container['isReplacementOrder'] = $isReplacementOrder;

        return $this;
    }

    /**
     * Gets promiseResponseDueDate.
     */
    public function getPromiseResponseDueDate() : ?string
    {
        return $this->container['promiseResponseDueDate'];
    }

    /**
     * Sets promiseResponseDueDate.
     *
     * @param null|string $promiseResponseDueDate Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
     */
    public function setPromiseResponseDueDate(?string $promiseResponseDueDate) : self
    {
        $this->container['promiseResponseDueDate'] = $promiseResponseDueDate;

        return $this;
    }

    /**
     * Gets isEstimatedShipDateSet.
     */
    public function getIsEstimatedShipDateSet() : ?bool
    {
        return $this->container['isEstimatedShipDateSet'];
    }

    /**
     * Sets isEstimatedShipDateSet.
     *
     * @param null|bool $isEstimatedShipDateSet When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
     */
    public function setIsEstimatedShipDateSet(?bool $isEstimatedShipDateSet) : self
    {
        $this->container['isEstimatedShipDateSet'] = $isEstimatedShipDateSet;

        return $this;
    }

    /**
     * Gets isSoldByAB.
     */
    public function getIsSoldByAB() : ?bool
    {
        return $this->container['isSoldByAB'];
    }

    /**
     * Sets isSoldByAB.
     *
     * @param null|bool $isSoldByAB When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     */
    public function setIsSoldByAB(?bool $isSoldByAB) : self
    {
        $this->container['isSoldByAB'] = $isSoldByAB;

        return $this;
    }

    /**
     * Gets defaultShipFromLocationAddress.
     */
    public function getDefaultShipFromLocationAddress() : ?Address
    {
        return $this->container['defaultShipFromLocationAddress'];
    }

    /**
     * Sets defaultShipFromLocationAddress.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\Address $defaultShipFromLocationAddress defaultShipFromLocationAddress
     */
    public function setDefaultShipFromLocationAddress(?Address $defaultShipFromLocationAddress) : self
    {
        $this->container['defaultShipFromLocationAddress'] = $defaultShipFromLocationAddress;

        return $this;
    }

    /**
     * Gets fulfillmentInstruction.
     */
    public function getFulfillmentInstruction() : ?FulfillmentInstruction
    {
        return $this->container['fulfillmentInstruction'];
    }

    /**
     * Sets fulfillmentInstruction.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\FulfillmentInstruction $fulfillmentInstruction fulfillmentInstruction
     */
    public function setFulfillmentInstruction(?FulfillmentInstruction $fulfillmentInstruction) : self
    {
        $this->container['fulfillmentInstruction'] = $fulfillmentInstruction;

        return $this;
    }

    /**
     * Gets isISPU.
     */
    public function getIsISPU() : ?bool
    {
        return $this->container['isISPU'];
    }

    /**
     * Sets isISPU.
     *
     * @param null|bool $isISPU when true, this order is marked to be picked up from a store rather than delivered
     */
    public function setIsISPU(?bool $isISPU) : self
    {
        $this->container['isISPU'] = $isISPU;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
