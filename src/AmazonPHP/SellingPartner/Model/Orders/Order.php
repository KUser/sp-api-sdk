<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AmazonPHP\SellingPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonPHP\SellingPartner\Model\Orders;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\Model\ModelInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'amazonOrderId' => 'string',
        'sellerOrderId' => 'string',
        'purchaseDate' => 'string',
        'lastUpdateDate' => 'string',
        'orderStatus' => 'string',
        'fulfillmentChannel' => 'string',
        'salesChannel' => 'string',
        'orderChannel' => 'string',
        'shipServiceLevel' => 'string',
        'orderTotal' => '\AmazonPHP\SellingPartner\Model\Orders\Money',
        'numberOfItemsShipped' => 'int',
        'numberOfItemsUnshipped' => 'int',
        'paymentExecutionDetail' => '\AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[]',
        'paymentMethod' => 'string',
        'paymentMethodDetails' => 'string[]',
        'marketplaceId' => 'string',
        'shipmentServiceLevelCategory' => 'string',
        'easyShipShipmentStatus' => 'string',
        'cbaDisplayableShippingLabel' => 'string',
        'orderType' => 'string',
        'earliestShipDate' => 'string',
        'latestShipDate' => 'string',
        'earliestDeliveryDate' => 'string',
        'latestDeliveryDate' => 'string',
        'isBusinessOrder' => 'bool',
        'isPrime' => 'bool',
        'isPremiumOrder' => 'bool',
        'isGlobalExpressEnabled' => 'bool',
        'replacedOrderId' => 'string',
        'isReplacementOrder' => 'bool',
        'promiseResponseDueDate' => 'string',
        'isEstimatedShipDateSet' => 'bool',
        'isSoldByAB' => 'bool',
        'defaultShipFromLocationAddress' => '\AmazonPHP\SellingPartner\Model\Orders\Address',
        'fulfillmentInstruction' => '\AmazonPHP\SellingPartner\Model\Orders\FulfillmentInstruction',
        'isISPU' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'amazonOrderId' => null,
        'sellerOrderId' => null,
        'purchaseDate' => null,
        'lastUpdateDate' => null,
        'orderStatus' => null,
        'fulfillmentChannel' => null,
        'salesChannel' => null,
        'orderChannel' => null,
        'shipServiceLevel' => null,
        'orderTotal' => null,
        'numberOfItemsShipped' => null,
        'numberOfItemsUnshipped' => null,
        'paymentExecutionDetail' => null,
        'paymentMethod' => null,
        'paymentMethodDetails' => null,
        'marketplaceId' => null,
        'shipmentServiceLevelCategory' => null,
        'easyShipShipmentStatus' => null,
        'cbaDisplayableShippingLabel' => null,
        'orderType' => null,
        'earliestShipDate' => null,
        'latestShipDate' => null,
        'earliestDeliveryDate' => null,
        'latestDeliveryDate' => null,
        'isBusinessOrder' => null,
        'isPrime' => null,
        'isPremiumOrder' => null,
        'isGlobalExpressEnabled' => null,
        'replacedOrderId' => null,
        'isReplacementOrder' => null,
        'promiseResponseDueDate' => null,
        'isEstimatedShipDateSet' => null,
        'isSoldByAB' => null,
        'defaultShipFromLocationAddress' => null,
        'fulfillmentInstruction' => null,
        'isISPU' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'amazonOrderId' => 'AmazonOrderId',
        'sellerOrderId' => 'SellerOrderId',
        'purchaseDate' => 'PurchaseDate',
        'lastUpdateDate' => 'LastUpdateDate',
        'orderStatus' => 'OrderStatus',
        'fulfillmentChannel' => 'FulfillmentChannel',
        'salesChannel' => 'SalesChannel',
        'orderChannel' => 'OrderChannel',
        'shipServiceLevel' => 'ShipServiceLevel',
        'orderTotal' => 'OrderTotal',
        'numberOfItemsShipped' => 'NumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'NumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'PaymentExecutionDetail',
        'paymentMethod' => 'PaymentMethod',
        'paymentMethodDetails' => 'PaymentMethodDetails',
        'marketplaceId' => 'MarketplaceId',
        'shipmentServiceLevelCategory' => 'ShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'EasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'CbaDisplayableShippingLabel',
        'orderType' => 'OrderType',
        'earliestShipDate' => 'EarliestShipDate',
        'latestShipDate' => 'LatestShipDate',
        'earliestDeliveryDate' => 'EarliestDeliveryDate',
        'latestDeliveryDate' => 'LatestDeliveryDate',
        'isBusinessOrder' => 'IsBusinessOrder',
        'isPrime' => 'IsPrime',
        'isPremiumOrder' => 'IsPremiumOrder',
        'isGlobalExpressEnabled' => 'IsGlobalExpressEnabled',
        'replacedOrderId' => 'ReplacedOrderId',
        'isReplacementOrder' => 'IsReplacementOrder',
        'promiseResponseDueDate' => 'PromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'IsEstimatedShipDateSet',
        'isSoldByAB' => 'IsSoldByAB',
        'defaultShipFromLocationAddress' => 'DefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'FulfillmentInstruction',
        'isISPU' => 'IsISPU'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'amazonOrderId' => 'setAmazonOrderId',
        'sellerOrderId' => 'setSellerOrderId',
        'purchaseDate' => 'setPurchaseDate',
        'lastUpdateDate' => 'setLastUpdateDate',
        'orderStatus' => 'setOrderStatus',
        'fulfillmentChannel' => 'setFulfillmentChannel',
        'salesChannel' => 'setSalesChannel',
        'orderChannel' => 'setOrderChannel',
        'shipServiceLevel' => 'setShipServiceLevel',
        'orderTotal' => 'setOrderTotal',
        'numberOfItemsShipped' => 'setNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'setNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'setPaymentExecutionDetail',
        'paymentMethod' => 'setPaymentMethod',
        'paymentMethodDetails' => 'setPaymentMethodDetails',
        'marketplaceId' => 'setMarketplaceId',
        'shipmentServiceLevelCategory' => 'setShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'setEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'setCbaDisplayableShippingLabel',
        'orderType' => 'setOrderType',
        'earliestShipDate' => 'setEarliestShipDate',
        'latestShipDate' => 'setLatestShipDate',
        'earliestDeliveryDate' => 'setEarliestDeliveryDate',
        'latestDeliveryDate' => 'setLatestDeliveryDate',
        'isBusinessOrder' => 'setIsBusinessOrder',
        'isPrime' => 'setIsPrime',
        'isPremiumOrder' => 'setIsPremiumOrder',
        'isGlobalExpressEnabled' => 'setIsGlobalExpressEnabled',
        'replacedOrderId' => 'setReplacedOrderId',
        'isReplacementOrder' => 'setIsReplacementOrder',
        'promiseResponseDueDate' => 'setPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'setIsEstimatedShipDateSet',
        'isSoldByAB' => 'setIsSoldByAB',
        'defaultShipFromLocationAddress' => 'setDefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'setFulfillmentInstruction',
        'isISPU' => 'setIsISPU'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'amazonOrderId' => 'getAmazonOrderId',
        'sellerOrderId' => 'getSellerOrderId',
        'purchaseDate' => 'getPurchaseDate',
        'lastUpdateDate' => 'getLastUpdateDate',
        'orderStatus' => 'getOrderStatus',
        'fulfillmentChannel' => 'getFulfillmentChannel',
        'salesChannel' => 'getSalesChannel',
        'orderChannel' => 'getOrderChannel',
        'shipServiceLevel' => 'getShipServiceLevel',
        'orderTotal' => 'getOrderTotal',
        'numberOfItemsShipped' => 'getNumberOfItemsShipped',
        'numberOfItemsUnshipped' => 'getNumberOfItemsUnshipped',
        'paymentExecutionDetail' => 'getPaymentExecutionDetail',
        'paymentMethod' => 'getPaymentMethod',
        'paymentMethodDetails' => 'getPaymentMethodDetails',
        'marketplaceId' => 'getMarketplaceId',
        'shipmentServiceLevelCategory' => 'getShipmentServiceLevelCategory',
        'easyShipShipmentStatus' => 'getEasyShipShipmentStatus',
        'cbaDisplayableShippingLabel' => 'getCbaDisplayableShippingLabel',
        'orderType' => 'getOrderType',
        'earliestShipDate' => 'getEarliestShipDate',
        'latestShipDate' => 'getLatestShipDate',
        'earliestDeliveryDate' => 'getEarliestDeliveryDate',
        'latestDeliveryDate' => 'getLatestDeliveryDate',
        'isBusinessOrder' => 'getIsBusinessOrder',
        'isPrime' => 'getIsPrime',
        'isPremiumOrder' => 'getIsPremiumOrder',
        'isGlobalExpressEnabled' => 'getIsGlobalExpressEnabled',
        'replacedOrderId' => 'getReplacedOrderId',
        'isReplacementOrder' => 'getIsReplacementOrder',
        'promiseResponseDueDate' => 'getPromiseResponseDueDate',
        'isEstimatedShipDateSet' => 'getIsEstimatedShipDateSet',
        'isSoldByAB' => 'getIsSoldByAB',
        'defaultShipFromLocationAddress' => 'getDefaultShipFromLocationAddress',
        'fulfillmentInstruction' => 'getFulfillmentInstruction',
        'isISPU' => 'getIsISPU'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const ORDER_STATUS_PENDING = 'Pending';
    const ORDER_STATUS_UNSHIPPED = 'Unshipped';
    const ORDER_STATUS_PARTIALLY_SHIPPED = 'PartiallyShipped';
    const ORDER_STATUS_SHIPPED = 'Shipped';
    const ORDER_STATUS_CANCELED = 'Canceled';
    const ORDER_STATUS_UNFULFILLABLE = 'Unfulfillable';
    const ORDER_STATUS_INVOICE_UNCONFIRMED = 'InvoiceUnconfirmed';
    const ORDER_STATUS_PENDING_AVAILABILITY = 'PendingAvailability';
    const FULFILLMENT_CHANNEL_MFN = 'MFN';
    const FULFILLMENT_CHANNEL_AFN = 'AFN';
    const PAYMENT_METHOD_COD = 'COD';
    const PAYMENT_METHOD_CVS = 'CVS';
    const PAYMENT_METHOD_OTHER = 'Other';
    const ORDER_TYPE_STANDARD_ORDER = 'StandardOrder';
    const ORDER_TYPE_LONG_LEAD_TIME_ORDER = 'LongLeadTimeOrder';
    const ORDER_TYPE_PREORDER = 'Preorder';
    const ORDER_TYPE_BACK_ORDER = 'BackOrder';
    const ORDER_TYPE_SOURCING_ON_DEMAND_ORDER = 'SourcingOnDemandOrder';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues() : array
    {
        return [
            self::ORDER_STATUS_PENDING,
            self::ORDER_STATUS_UNSHIPPED,
            self::ORDER_STATUS_PARTIALLY_SHIPPED,
            self::ORDER_STATUS_SHIPPED,
            self::ORDER_STATUS_CANCELED,
            self::ORDER_STATUS_UNFULFILLABLE,
            self::ORDER_STATUS_INVOICE_UNCONFIRMED,
            self::ORDER_STATUS_PENDING_AVAILABILITY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentChannelAllowableValues() : array
    {
        return [
            self::FULFILLMENT_CHANNEL_MFN,
            self::FULFILLMENT_CHANNEL_AFN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues() : array
    {
        return [
            self::PAYMENT_METHOD_COD,
            self::PAYMENT_METHOD_CVS,
            self::PAYMENT_METHOD_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderTypeAllowableValues() : array
    {
        return [
            self::ORDER_TYPE_STANDARD_ORDER,
            self::ORDER_TYPE_LONG_LEAD_TIME_ORDER,
            self::ORDER_TYPE_PREORDER,
            self::ORDER_TYPE_BACK_ORDER,
            self::ORDER_TYPE_SOURCING_ON_DEMAND_ORDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amazonOrderId'] = $data['amazonOrderId'] ?? null;
        $this->container['sellerOrderId'] = $data['sellerOrderId'] ?? null;
        $this->container['purchaseDate'] = $data['purchaseDate'] ?? null;
        $this->container['lastUpdateDate'] = $data['lastUpdateDate'] ?? null;
        $this->container['orderStatus'] = $data['orderStatus'] ?? null;
        $this->container['fulfillmentChannel'] = $data['fulfillmentChannel'] ?? null;
        $this->container['salesChannel'] = $data['salesChannel'] ?? null;
        $this->container['orderChannel'] = $data['orderChannel'] ?? null;
        $this->container['shipServiceLevel'] = $data['shipServiceLevel'] ?? null;
        $this->container['orderTotal'] = $data['orderTotal'] ?? null;
        $this->container['numberOfItemsShipped'] = $data['numberOfItemsShipped'] ?? null;
        $this->container['numberOfItemsUnshipped'] = $data['numberOfItemsUnshipped'] ?? null;
        $this->container['paymentExecutionDetail'] = $data['paymentExecutionDetail'] ?? null;
        $this->container['paymentMethod'] = $data['paymentMethod'] ?? null;
        $this->container['paymentMethodDetails'] = $data['paymentMethodDetails'] ?? null;
        $this->container['marketplaceId'] = $data['marketplaceId'] ?? null;
        $this->container['shipmentServiceLevelCategory'] = $data['shipmentServiceLevelCategory'] ?? null;
        $this->container['easyShipShipmentStatus'] = $data['easyShipShipmentStatus'] ?? null;
        $this->container['cbaDisplayableShippingLabel'] = $data['cbaDisplayableShippingLabel'] ?? null;
        $this->container['orderType'] = $data['orderType'] ?? null;
        $this->container['earliestShipDate'] = $data['earliestShipDate'] ?? null;
        $this->container['latestShipDate'] = $data['latestShipDate'] ?? null;
        $this->container['earliestDeliveryDate'] = $data['earliestDeliveryDate'] ?? null;
        $this->container['latestDeliveryDate'] = $data['latestDeliveryDate'] ?? null;
        $this->container['isBusinessOrder'] = $data['isBusinessOrder'] ?? null;
        $this->container['isPrime'] = $data['isPrime'] ?? null;
        $this->container['isPremiumOrder'] = $data['isPremiumOrder'] ?? null;
        $this->container['isGlobalExpressEnabled'] = $data['isGlobalExpressEnabled'] ?? null;
        $this->container['replacedOrderId'] = $data['replacedOrderId'] ?? null;
        $this->container['isReplacementOrder'] = $data['isReplacementOrder'] ?? null;
        $this->container['promiseResponseDueDate'] = $data['promiseResponseDueDate'] ?? null;
        $this->container['isEstimatedShipDateSet'] = $data['isEstimatedShipDateSet'] ?? null;
        $this->container['isSoldByAB'] = $data['isSoldByAB'] ?? null;
        $this->container['defaultShipFromLocationAddress'] = $data['defaultShipFromLocationAddress'] ?? null;
        $this->container['fulfillmentInstruction'] = $data['fulfillmentInstruction'] ?? null;
        $this->container['isISPU'] = $data['isISPU'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['amazonOrderId'] === null) {
            $invalidProperties[] = "'amazonOrderId' can't be null";
        }
        if ($this->container['purchaseDate'] === null) {
            $invalidProperties[] = "'purchaseDate' can't be null";
        }
        if ($this->container['lastUpdateDate'] === null) {
            $invalidProperties[] = "'lastUpdateDate' can't be null";
        }
        if ($this->container['orderStatus'] === null) {
            $invalidProperties[] = "'orderStatus' can't be null";
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['orderStatus']) && !in_array($this->container['orderStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderStatus', must be one of '%s'",
                $this->container['orderStatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFulfillmentChannelAllowableValues();
        if (!is_null($this->container['fulfillmentChannel']) && !in_array($this->container['fulfillmentChannel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillmentChannel', must be one of '%s'",
                $this->container['fulfillmentChannel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['paymentMethod']) && !in_array($this->container['paymentMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'paymentMethod', must be one of '%s'",
                $this->container['paymentMethod'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($this->container['orderType']) && !in_array($this->container['orderType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orderType', must be one of '%s'",
                $this->container['orderType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amazonOrderId
     *
     * @return string
     */
    public function getAmazonOrderId()
    {
        return $this->container['amazonOrderId'];
    }

    /**
     * Sets amazonOrderId
     *
     * @param string $amazonOrderId An Amazon-defined order identifier, in 3-7-7 format.
     *
     * @return self
     */
    public function setAmazonOrderId($amazonOrderId) : self
    {
        $this->container['amazonOrderId'] = $amazonOrderId;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return string|null
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string|null $sellerOrderId A seller-defined order identifier.
     *
     * @return self
     */
    public function setSellerOrderId($sellerOrderId) : self
    {
        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets purchaseDate
     *
     * @return string
     */
    public function getPurchaseDate()
    {
        return $this->container['purchaseDate'];
    }

    /**
     * Sets purchaseDate
     *
     * @param string $purchaseDate The date when the order was created.
     *
     * @return self
     */
    public function setPurchaseDate($purchaseDate) : self
    {
        $this->container['purchaseDate'] = $purchaseDate;

        return $this;
    }

    /**
     * Gets lastUpdateDate
     *
     * @return string
     */
    public function getLastUpdateDate()
    {
        return $this->container['lastUpdateDate'];
    }

    /**
     * Sets lastUpdateDate
     *
     * @param string $lastUpdateDate The date when the order was last updated.  Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
     *
     * @return self
     */
    public function setLastUpdateDate($lastUpdateDate) : self
    {
        $this->container['lastUpdateDate'] = $lastUpdateDate;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus The current order status.
     *
     * @return self
     */
    public function setOrderStatus($orderStatus) : self
    {
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($orderStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderStatus', must be one of '%s'",
                    $orderStatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets fulfillmentChannel
     *
     * @return string|null
     */
    public function getFulfillmentChannel()
    {
        return $this->container['fulfillmentChannel'];
    }

    /**
     * Sets fulfillmentChannel
     *
     * @param string|null $fulfillmentChannel Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
     *
     * @return self
     */
    public function setFulfillmentChannel($fulfillmentChannel) : self
    {
        $allowedValues = $this->getFulfillmentChannelAllowableValues();
        if (!is_null($fulfillmentChannel) && !in_array($fulfillmentChannel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillmentChannel', must be one of '%s'",
                    $fulfillmentChannel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillmentChannel'] = $fulfillmentChannel;

        return $this;
    }

    /**
     * Gets salesChannel
     *
     * @return string|null
     */
    public function getSalesChannel()
    {
        return $this->container['salesChannel'];
    }

    /**
     * Sets salesChannel
     *
     * @param string|null $salesChannel The sales channel of the first item in the order.
     *
     * @return self
     */
    public function setSalesChannel($salesChannel) : self
    {
        $this->container['salesChannel'] = $salesChannel;

        return $this;
    }

    /**
     * Gets orderChannel
     *
     * @return string|null
     */
    public function getOrderChannel()
    {
        return $this->container['orderChannel'];
    }

    /**
     * Sets orderChannel
     *
     * @param string|null $orderChannel The order channel of the first item in the order.
     *
     * @return self
     */
    public function setOrderChannel($orderChannel) : self
    {
        $this->container['orderChannel'] = $orderChannel;

        return $this;
    }

    /**
     * Gets shipServiceLevel
     *
     * @return string|null
     */
    public function getShipServiceLevel()
    {
        return $this->container['shipServiceLevel'];
    }

    /**
     * Sets shipServiceLevel
     *
     * @param string|null $shipServiceLevel The shipment service level of the order.
     *
     * @return self
     */
    public function setShipServiceLevel($shipServiceLevel) : self
    {
        $this->container['shipServiceLevel'] = $shipServiceLevel;

        return $this;
    }

    /**
     * Gets orderTotal
     *
     * @return \AmazonPHP\SellingPartner\Model\Orders\Money|null
     */
    public function getOrderTotal()
    {
        return $this->container['orderTotal'];
    }

    /**
     * Sets orderTotal
     *
     * @param \AmazonPHP\SellingPartner\Model\Orders\Money|null $orderTotal orderTotal
     *
     * @return self
     */
    public function setOrderTotal($orderTotal) : self
    {
        $this->container['orderTotal'] = $orderTotal;

        return $this;
    }

    /**
     * Gets numberOfItemsShipped
     *
     * @return int|null
     */
    public function getNumberOfItemsShipped()
    {
        return $this->container['numberOfItemsShipped'];
    }

    /**
     * Sets numberOfItemsShipped
     *
     * @param int|null $numberOfItemsShipped The number of items shipped.
     *
     * @return self
     */
    public function setNumberOfItemsShipped($numberOfItemsShipped) : self
    {
        $this->container['numberOfItemsShipped'] = $numberOfItemsShipped;

        return $this;
    }

    /**
     * Gets numberOfItemsUnshipped
     *
     * @return int|null
     */
    public function getNumberOfItemsUnshipped()
    {
        return $this->container['numberOfItemsUnshipped'];
    }

    /**
     * Sets numberOfItemsUnshipped
     *
     * @param int|null $numberOfItemsUnshipped The number of items unshipped.
     *
     * @return self
     */
    public function setNumberOfItemsUnshipped($numberOfItemsUnshipped) : self
    {
        $this->container['numberOfItemsUnshipped'] = $numberOfItemsUnshipped;

        return $this;
    }

    /**
     * Gets paymentExecutionDetail
     *
     * @return \AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[]|null
     */
    public function getPaymentExecutionDetail()
    {
        return $this->container['paymentExecutionDetail'];
    }

    /**
     * Sets paymentExecutionDetail
     *
     * @param \AmazonPHP\SellingPartner\Model\Orders\PaymentExecutionDetailItem[]|null $paymentExecutionDetail A list of payment execution detail items.
     *
     * @return self
     */
    public function setPaymentExecutionDetail($paymentExecutionDetail) : self
    {
        $this->container['paymentExecutionDetail'] = $paymentExecutionDetail;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod) : self
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($paymentMethod) && !in_array($paymentMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'paymentMethod', must be one of '%s'",
                    $paymentMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets paymentMethodDetails
     *
     * @return string[]|null
     */
    public function getPaymentMethodDetails()
    {
        return $this->container['paymentMethodDetails'];
    }

    /**
     * Sets paymentMethodDetails
     *
     * @param string[]|null $paymentMethodDetails A list of payment method detail items.
     *
     * @return self
     */
    public function setPaymentMethodDetails($paymentMethodDetails) : self
    {
        $this->container['paymentMethodDetails'] = $paymentMethodDetails;

        return $this;
    }

    /**
     * Gets marketplaceId
     *
     * @return string|null
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplaceId'];
    }

    /**
     * Sets marketplaceId
     *
     * @param string|null $marketplaceId The identifier for the marketplace where the order was placed.
     *
     * @return self
     */
    public function setMarketplaceId($marketplaceId) : self
    {
        $this->container['marketplaceId'] = $marketplaceId;

        return $this;
    }

    /**
     * Gets shipmentServiceLevelCategory
     *
     * @return string|null
     */
    public function getShipmentServiceLevelCategory()
    {
        return $this->container['shipmentServiceLevelCategory'];
    }

    /**
     * Sets shipmentServiceLevelCategory
     *
     * @param string|null $shipmentServiceLevelCategory The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
     *
     * @return self
     */
    public function setShipmentServiceLevelCategory($shipmentServiceLevelCategory) : self
    {
        $this->container['shipmentServiceLevelCategory'] = $shipmentServiceLevelCategory;

        return $this;
    }

    /**
     * Gets easyShipShipmentStatus
     *
     * @return string|null
     */
    public function getEasyShipShipmentStatus()
    {
        return $this->container['easyShipShipmentStatus'];
    }

    /**
     * Sets easyShipShipmentStatus
     *
     * @param string|null $easyShipShipmentStatus The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.  Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
     *
     * @return self
     */
    public function setEasyShipShipmentStatus($easyShipShipmentStatus) : self
    {
        $this->container['easyShipShipmentStatus'] = $easyShipShipmentStatus;

        return $this;
    }

    /**
     * Gets cbaDisplayableShippingLabel
     *
     * @return string|null
     */
    public function getCbaDisplayableShippingLabel()
    {
        return $this->container['cbaDisplayableShippingLabel'];
    }

    /**
     * Sets cbaDisplayableShippingLabel
     *
     * @param string|null $cbaDisplayableShippingLabel Custom ship label for Checkout by Amazon (CBA).
     *
     * @return self
     */
    public function setCbaDisplayableShippingLabel($cbaDisplayableShippingLabel) : self
    {
        $this->container['cbaDisplayableShippingLabel'] = $cbaDisplayableShippingLabel;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string|null $orderType The type of the order.
     *
     * @return self
     */
    public function setOrderType($orderType) : self
    {
        $allowedValues = $this->getOrderTypeAllowableValues();
        if (!is_null($orderType) && !in_array($orderType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orderType', must be one of '%s'",
                    $orderType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets earliestShipDate
     *
     * @return string|null
     */
    public function getEarliestShipDate()
    {
        return $this->container['earliestShipDate'];
    }

    /**
     * Sets earliestShipDate
     *
     * @param string|null $earliestShipDate The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
     *
     * @return self
     */
    public function setEarliestShipDate($earliestShipDate) : self
    {
        $this->container['earliestShipDate'] = $earliestShipDate;

        return $this;
    }

    /**
     * Gets latestShipDate
     *
     * @return string|null
     */
    public function getLatestShipDate()
    {
        return $this->container['latestShipDate'];
    }

    /**
     * Sets latestShipDate
     *
     * @param string|null $latestShipDate The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
     *
     * @return self
     */
    public function setLatestShipDate($latestShipDate) : self
    {
        $this->container['latestShipDate'] = $latestShipDate;

        return $this;
    }

    /**
     * Gets earliestDeliveryDate
     *
     * @return string|null
     */
    public function getEarliestDeliveryDate()
    {
        return $this->container['earliestDeliveryDate'];
    }

    /**
     * Sets earliestDeliveryDate
     *
     * @param string|null $earliestDeliveryDate The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
     *
     * @return self
     */
    public function setEarliestDeliveryDate($earliestDeliveryDate) : self
    {
        $this->container['earliestDeliveryDate'] = $earliestDeliveryDate;

        return $this;
    }

    /**
     * Gets latestDeliveryDate
     *
     * @return string|null
     */
    public function getLatestDeliveryDate()
    {
        return $this->container['latestDeliveryDate'];
    }

    /**
     * Sets latestDeliveryDate
     *
     * @param string|null $latestDeliveryDate The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
     *
     * @return self
     */
    public function setLatestDeliveryDate($latestDeliveryDate) : self
    {
        $this->container['latestDeliveryDate'] = $latestDeliveryDate;

        return $this;
    }

    /**
     * Gets isBusinessOrder
     *
     * @return bool|null
     */
    public function getIsBusinessOrder()
    {
        return $this->container['isBusinessOrder'];
    }

    /**
     * Sets isBusinessOrder
     *
     * @param bool|null $isBusinessOrder When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
     *
     * @return self
     */
    public function setIsBusinessOrder($isBusinessOrder) : self
    {
        $this->container['isBusinessOrder'] = $isBusinessOrder;

        return $this;
    }

    /**
     * Gets isPrime
     *
     * @return bool|null
     */
    public function getIsPrime()
    {
        return $this->container['isPrime'];
    }

    /**
     * Sets isPrime
     *
     * @param bool|null $isPrime When true, the order is a seller-fulfilled Amazon Prime order.
     *
     * @return self
     */
    public function setIsPrime($isPrime) : self
    {
        $this->container['isPrime'] = $isPrime;

        return $this;
    }

    /**
     * Gets isPremiumOrder
     *
     * @return bool|null
     */
    public function getIsPremiumOrder()
    {
        return $this->container['isPremiumOrder'];
    }

    /**
     * Sets isPremiumOrder
     *
     * @param bool|null $isPremiumOrder When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
     *
     * @return self
     */
    public function setIsPremiumOrder($isPremiumOrder) : self
    {
        $this->container['isPremiumOrder'] = $isPremiumOrder;

        return $this;
    }

    /**
     * Gets isGlobalExpressEnabled
     *
     * @return bool|null
     */
    public function getIsGlobalExpressEnabled()
    {
        return $this->container['isGlobalExpressEnabled'];
    }

    /**
     * Sets isGlobalExpressEnabled
     *
     * @param bool|null $isGlobalExpressEnabled When true, the order is a GlobalExpress order.
     *
     * @return self
     */
    public function setIsGlobalExpressEnabled($isGlobalExpressEnabled) : self
    {
        $this->container['isGlobalExpressEnabled'] = $isGlobalExpressEnabled;

        return $this;
    }

    /**
     * Gets replacedOrderId
     *
     * @return string|null
     */
    public function getReplacedOrderId()
    {
        return $this->container['replacedOrderId'];
    }

    /**
     * Sets replacedOrderId
     *
     * @param string|null $replacedOrderId The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
     *
     * @return self
     */
    public function setReplacedOrderId($replacedOrderId) : self
    {
        $this->container['replacedOrderId'] = $replacedOrderId;

        return $this;
    }

    /**
     * Gets isReplacementOrder
     *
     * @return bool|null
     */
    public function getIsReplacementOrder()
    {
        return $this->container['isReplacementOrder'];
    }

    /**
     * Sets isReplacementOrder
     *
     * @param bool|null $isReplacementOrder When true, this is a replacement order.
     *
     * @return self
     */
    public function setIsReplacementOrder($isReplacementOrder) : self
    {
        $this->container['isReplacementOrder'] = $isReplacementOrder;

        return $this;
    }

    /**
     * Gets promiseResponseDueDate
     *
     * @return string|null
     */
    public function getPromiseResponseDueDate()
    {
        return $this->container['promiseResponseDueDate'];
    }

    /**
     * Sets promiseResponseDueDate
     *
     * @param string|null $promiseResponseDueDate Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
     *
     * @return self
     */
    public function setPromiseResponseDueDate($promiseResponseDueDate) : self
    {
        $this->container['promiseResponseDueDate'] = $promiseResponseDueDate;

        return $this;
    }

    /**
     * Gets isEstimatedShipDateSet
     *
     * @return bool|null
     */
    public function getIsEstimatedShipDateSet()
    {
        return $this->container['isEstimatedShipDateSet'];
    }

    /**
     * Sets isEstimatedShipDateSet
     *
     * @param bool|null $isEstimatedShipDateSet When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
     *
     * @return self
     */
    public function setIsEstimatedShipDateSet($isEstimatedShipDateSet) : self
    {
        $this->container['isEstimatedShipDateSet'] = $isEstimatedShipDateSet;

        return $this;
    }

    /**
     * Gets isSoldByAB
     *
     * @return bool|null
     */
    public function getIsSoldByAB()
    {
        return $this->container['isSoldByAB'];
    }

    /**
     * Sets isSoldByAB
     *
     * @param bool|null $isSoldByAB When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     *
     * @return self
     */
    public function setIsSoldByAB($isSoldByAB) : self
    {
        $this->container['isSoldByAB'] = $isSoldByAB;

        return $this;
    }

    /**
     * Gets defaultShipFromLocationAddress
     *
     * @return \AmazonPHP\SellingPartner\Model\Orders\Address|null
     */
    public function getDefaultShipFromLocationAddress()
    {
        return $this->container['defaultShipFromLocationAddress'];
    }

    /**
     * Sets defaultShipFromLocationAddress
     *
     * @param \AmazonPHP\SellingPartner\Model\Orders\Address|null $defaultShipFromLocationAddress defaultShipFromLocationAddress
     *
     * @return self
     */
    public function setDefaultShipFromLocationAddress($defaultShipFromLocationAddress) : self
    {
        $this->container['defaultShipFromLocationAddress'] = $defaultShipFromLocationAddress;

        return $this;
    }

    /**
     * Gets fulfillmentInstruction
     *
     * @return \AmazonPHP\SellingPartner\Model\Orders\FulfillmentInstruction|null
     */
    public function getFulfillmentInstruction()
    {
        return $this->container['fulfillmentInstruction'];
    }

    /**
     * Sets fulfillmentInstruction
     *
     * @param \AmazonPHP\SellingPartner\Model\Orders\FulfillmentInstruction|null $fulfillmentInstruction fulfillmentInstruction
     *
     * @return self
     */
    public function setFulfillmentInstruction($fulfillmentInstruction) : self
    {
        $this->container['fulfillmentInstruction'] = $fulfillmentInstruction;

        return $this;
    }

    /**
     * Gets isISPU
     *
     * @return bool|null
     */
    public function getIsISPU()
    {
        return $this->container['isISPU'];
    }

    /**
     * Sets isISPU
     *
     * @param bool|null $isISPU When true, this order is marked to be picked up from a store rather than delivered.
     *
     * @return self
     */
    public function setIsISPU($isISPU) : self
    {
        $this->container['isISPU'] = $isISPU;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : string
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
