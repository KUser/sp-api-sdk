<?php declare(strict_types=1);
/**
 * OrderItemBuyerInfo.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Orders.
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
namespace AmazonPHP\SellingPartner\Model\Orders;

use AmazonPHP\SellingPartner\Model\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrderItemBuyerInfo implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'OrderItemBuyerInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'orderItemId' => 'string',
        'buyerCustomizedInfo' => '\AmazonPHP\SellingPartner\Model\Orders\BuyerCustomizedInfoDetail',
        'giftWrapPrice' => '\AmazonPHP\SellingPartner\Model\Orders\Money',
        'giftWrapTax' => '\AmazonPHP\SellingPartner\Model\Orders\Money',
        'giftMessageText' => 'string',
        'giftWrapLevel' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'orderItemId' => null,
        'buyerCustomizedInfo' => null,
        'giftWrapPrice' => null,
        'giftWrapTax' => null,
        'giftMessageText' => null,
        'giftWrapLevel' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'orderItemId' => 'OrderItemId',
        'buyerCustomizedInfo' => 'BuyerCustomizedInfo',
        'giftWrapPrice' => 'GiftWrapPrice',
        'giftWrapTax' => 'GiftWrapTax',
        'giftMessageText' => 'GiftMessageText',
        'giftWrapLevel' => 'GiftWrapLevel',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'orderItemId' => 'setOrderItemId',
        'buyerCustomizedInfo' => 'setBuyerCustomizedInfo',
        'giftWrapPrice' => 'setGiftWrapPrice',
        'giftWrapTax' => 'setGiftWrapTax',
        'giftMessageText' => 'setGiftMessageText',
        'giftWrapLevel' => 'setGiftWrapLevel',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'orderItemId' => 'getOrderItemId',
        'buyerCustomizedInfo' => 'getBuyerCustomizedInfo',
        'giftWrapPrice' => 'getGiftWrapPrice',
        'giftWrapTax' => 'getGiftWrapTax',
        'giftMessageText' => 'getGiftMessageText',
        'giftWrapLevel' => 'getGiftWrapLevel',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderItemId'] = $data['orderItemId'] ?? null;
        $this->container['buyerCustomizedInfo'] = $data['buyerCustomizedInfo'] ?? null;
        $this->container['giftWrapPrice'] = $data['giftWrapPrice'] ?? null;
        $this->container['giftWrapTax'] = $data['giftWrapTax'] ?? null;
        $this->container['giftMessageText'] = $data['giftMessageText'] ?? null;
        $this->container['giftWrapLevel'] = $data['giftWrapLevel'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['orderItemId'] === null) {
            $invalidProperties[] = "'orderItemId' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets orderItemId.
     */
    public function getOrderItemId() : string
    {
        return $this->container['orderItemId'];
    }

    /**
     * Sets orderItemId.
     *
     * @param string $orderItemId an Amazon-defined order item identifier
     */
    public function setOrderItemId(string $orderItemId) : self
    {
        $this->container['orderItemId'] = $orderItemId;

        return $this;
    }

    /**
     * Gets buyerCustomizedInfo.
     */
    public function getBuyerCustomizedInfo() : ?BuyerCustomizedInfoDetail
    {
        return $this->container['buyerCustomizedInfo'];
    }

    /**
     * Sets buyerCustomizedInfo.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\BuyerCustomizedInfoDetail $buyerCustomizedInfo buyerCustomizedInfo
     */
    public function setBuyerCustomizedInfo(?BuyerCustomizedInfoDetail $buyerCustomizedInfo) : self
    {
        $this->container['buyerCustomizedInfo'] = $buyerCustomizedInfo;

        return $this;
    }

    /**
     * Gets giftWrapPrice.
     */
    public function getGiftWrapPrice() : ?Money
    {
        return $this->container['giftWrapPrice'];
    }

    /**
     * Sets giftWrapPrice.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\Money $giftWrapPrice giftWrapPrice
     */
    public function setGiftWrapPrice(?Money $giftWrapPrice) : self
    {
        $this->container['giftWrapPrice'] = $giftWrapPrice;

        return $this;
    }

    /**
     * Gets giftWrapTax.
     */
    public function getGiftWrapTax() : ?Money
    {
        return $this->container['giftWrapTax'];
    }

    /**
     * Sets giftWrapTax.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\Orders\Money $giftWrapTax giftWrapTax
     */
    public function setGiftWrapTax(?Money $giftWrapTax) : self
    {
        $this->container['giftWrapTax'] = $giftWrapTax;

        return $this;
    }

    /**
     * Gets giftMessageText.
     */
    public function getGiftMessageText() : ?string
    {
        return $this->container['giftMessageText'];
    }

    /**
     * Sets giftMessageText.
     *
     * @param null|string $giftMessageText a gift message provided by the buyer
     */
    public function setGiftMessageText(?string $giftMessageText) : self
    {
        $this->container['giftMessageText'] = $giftMessageText;

        return $this;
    }

    /**
     * Gets giftWrapLevel.
     */
    public function getGiftWrapLevel() : ?string
    {
        return $this->container['giftWrapLevel'];
    }

    /**
     * Sets giftWrapLevel.
     *
     * @param null|string $giftWrapLevel the gift wrap level specified by the buyer
     */
    public function setGiftWrapLevel(?string $giftWrapLevel) : self
    {
        $this->container['giftWrapLevel'] = $giftWrapLevel;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
