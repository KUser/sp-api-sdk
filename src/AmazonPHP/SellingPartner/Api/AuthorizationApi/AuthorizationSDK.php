<?php declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Api\AuthorizationApi;

use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use AmazonPHP\SellingPartner\HttpSignatureHeaders;
use AmazonPHP\SellingPartner\OAuth;
use AmazonPHP\SellingPartner\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 */
final class AuthorizationSDK
{
    private OAuth $oauth;

    public function __construct(OAuth $authentication)
    {
        $this->oauth = $authentication;
    }

    /**
     * Operation getAuthorizationCode.
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     */
    public function getAuthorizationCode(string $sellingPartnerId, string $developerId, string $mwsAuthToken) : \AmazonPHP\SellingPartner\Model\Authorization\GetAuthorizationCodeResponse
    {
        [$response] = $this->getAuthorizationCodeWithHttpInfo($sellingPartnerId, $developerId, $mwsAuthToken);

        return $response;
    }

    /**
     * Create request for operation 'getAuthorizationCode'.
     *
     * @param string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getAuthorizationCodeRequest(string $sellingPartnerId, string $developerId, string $mwsAuthToken) : RequestInterface
    {
        // verify the required parameter 'sellingPartnerId' is set
        if ($sellingPartnerId === null || (\is_array($sellingPartnerId) && \count($sellingPartnerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $sellingPartnerId when calling getAuthorizationCode'
            );
        }
        // verify the required parameter 'developerId' is set
        if ($developerId === null || (\is_array($developerId) && \count($developerId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $developerId when calling getAuthorizationCode'
            );
        }
        // verify the required parameter 'mwsAuthToken' is set
        if ($mwsAuthToken === null || (\is_array($mwsAuthToken) && \count($mwsAuthToken) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $mwsAuthToken when calling getAuthorizationCode'
            );
        }

        $resourcePath = '/authorization/v1/authorizationCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (\is_array($sellingPartnerId)) {
            $sellingPartnerId = ObjectSerializer::serializeCollection($sellingPartnerId, '', true);
        }

        if ($sellingPartnerId !== null) {
            $queryParams['sellingPartnerId'] = $sellingPartnerId;
        }
        // query params
        if (\is_array($developerId)) {
            $developerId = ObjectSerializer::serializeCollection($developerId, '', true);
        }

        if ($developerId !== null) {
            $queryParams['developerId'] = $developerId;
        }
        // query params
        if (\is_array($mwsAuthToken)) {
            $mwsAuthToken = ObjectSerializer::serializeCollection($mwsAuthToken, '', true);
        }

        if ($mwsAuthToken !== null) {
            $queryParams['mwsAuthToken'] = $mwsAuthToken;
        }

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getAuthorizationCodeWithHttpInfo.
     *
     * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
     *
     * @param string $sellingPartnerId The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. (required)
     * @param string $developerId Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. (required)
     * @param string $mwsAuthToken The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     *
     * @return array<\AmazonPHP\SellingPartner\Model\Authorization\GetAuthorizationCodeResponse>
     */
    private function getAuthorizationCodeWithHttpInfo(string $sellingPartnerId, string $developerId, string $mwsAuthToken) : array
    {
        $request = $this->getAuthorizationCodeRequest($sellingPartnerId, $developerId, $mwsAuthToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 413:
                case 415:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Authorization\GetAuthorizationCodeResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Authorization\GetAuthorizationCodeResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 413:
                case 415:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Authorization\GetAuthorizationCodeResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }
}
