<?php

namespace AmazonPHP\SellingPartner\Api\ReportsApi;

use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use AmazonPHP\SellingPartner\OAuth;
use AmazonPHP\SellingPartner\ObjectSerializer;
use AmazonPHP\SellingPartner\HttpSignatureHeaders;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 */
final class ReportsSDK
{
    private OAuth $oauth;

    public function __construct(OAuth $authentication)
    {
        $this->oauth = $authentication;
    }

    /**
     * Operation cancelReport
     *
     * @param string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse
     */
    public function cancelReport($reportId): \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse
    {
        list($response) = $this->cancelReportWithHttpInfo($reportId);
        return $response;
    }

    /**
     * Operation cancelReportWithHttpInfo
     *
     * @param  string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse>
     */
    private function cancelReportWithHttpInfo($reportId) : array
    {
        $request = $this->cancelReportRequest($reportId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'cancelReport'
     *
     * @param  string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function cancelReportRequest($reportId) : RequestInterface
    {
        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportId when calling cancelReport'
            );
        }

        $resourcePath = '/reports/2020-09-04/reports/{reportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'reportId' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation cancelReportSchedule
     *
     * @param string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse
     */
    public function cancelReportSchedule($reportScheduleId): \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse
    {
        list($response) = $this->cancelReportScheduleWithHttpInfo($reportScheduleId);
        return $response;
    }

    /**
     * Operation cancelReportScheduleWithHttpInfo
     *
     * @param  string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse>
     */
    private function cancelReportScheduleWithHttpInfo($reportScheduleId) : array
    {
        $request = $this->cancelReportScheduleRequest($reportScheduleId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CancelReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'cancelReportSchedule'
     *
     * @param  string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function cancelReportScheduleRequest($reportScheduleId) : RequestInterface
    {
        // verify the required parameter 'reportScheduleId' is set
        if ($reportScheduleId === null || (is_array($reportScheduleId) && count($reportScheduleId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportScheduleId when calling cancelReportSchedule'
            );
        }

        $resourcePath = '/reports/2020-09-04/schedules/{reportScheduleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($reportScheduleId !== null) {
            $resourcePath = str_replace(
                '{' . 'reportScheduleId' . '}',
                ObjectSerializer::toPathValue($reportScheduleId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation createReport
     *
     * @param \AmazonPHP\SellingPartner\Model\Reports\CreateReportSpecification $body body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse
     */
    public function createReport($body): \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse
    {
        list($response) = $this->createReportWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createReportWithHttpInfo
     *
     * @param  \AmazonPHP\SellingPartner\Model\Reports\CreateReportSpecification $body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse>
     */
    private function createReportWithHttpInfo($body) : array
    {
        $request = $this->createReportRequest($body);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'createReport'
     *
     * @param  \AmazonPHP\SellingPartner\Model\Reports\CreateReportSpecification $body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function createReportRequest($body) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createReport'
            );
        }

        $resourcePath = '/reports/2020-09-04/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation createReportSchedule
     *
     * @param \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleSpecification $body body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse
     */
    public function createReportSchedule($body): \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse
    {
        list($response) = $this->createReportScheduleWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createReportScheduleWithHttpInfo
     *
     * @param  \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleSpecification $body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse>
     */
    private function createReportScheduleWithHttpInfo($body) : array
    {
        $request = $this->createReportScheduleRequest($body);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'createReportSchedule'
     *
     * @param  \AmazonPHP\SellingPartner\Model\Reports\CreateReportScheduleSpecification $body (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function createReportScheduleRequest($body) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createReportSchedule'
            );
        }

        $resourcePath = '/reports/2020-09-04/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getReport
     *
     * @param string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse
     */
    public function getReport($reportId): \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse
    {
        list($response) = $this->getReportWithHttpInfo($reportId);
        return $response;
    }

    /**
     * Operation getReportWithHttpInfo
     *
     * @param  string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\GetReportResponse>
     */
    private function getReportWithHttpInfo($reportId) : array
    {
        $request = $this->getReportRequest($reportId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getReport'
     *
     * @param  string $reportId The identifier for the report. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getReportRequest($reportId) : RequestInterface
    {
        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportId when calling getReport'
            );
        }

        $resourcePath = '/reports/2020-09-04/reports/{reportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'reportId' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getReportDocument
     *
     * @param string $reportDocumentId The identifier for the report document. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse
     */
    public function getReportDocument($reportDocumentId): \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse
    {
        list($response) = $this->getReportDocumentWithHttpInfo($reportDocumentId);
        return $response;
    }

    /**
     * Operation getReportDocumentWithHttpInfo
     *
     * @param  string $reportDocumentId The identifier for the report document. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse>
     */
    private function getReportDocumentWithHttpInfo($reportDocumentId) : array
    {
        $request = $this->getReportDocumentRequest($reportDocumentId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getReportDocument'
     *
     * @param  string $reportDocumentId The identifier for the report document. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getReportDocumentRequest($reportDocumentId) : RequestInterface
    {
        // verify the required parameter 'reportDocumentId' is set
        if ($reportDocumentId === null || (is_array($reportDocumentId) && count($reportDocumentId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportDocumentId when calling getReportDocument'
            );
        }

        $resourcePath = '/reports/2020-09-04/documents/{reportDocumentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($reportDocumentId !== null) {
            $resourcePath = str_replace(
                '{' . 'reportDocumentId' . '}',
                ObjectSerializer::toPathValue($reportDocumentId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getReportSchedule
     *
     * @param string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse
     */
    public function getReportSchedule($reportScheduleId): \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse
    {
        list($response) = $this->getReportScheduleWithHttpInfo($reportScheduleId);
        return $response;
    }

    /**
     * Operation getReportScheduleWithHttpInfo
     *
     * @param  string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse>
     */
    private function getReportScheduleWithHttpInfo($reportScheduleId) : array
    {
        $request = $this->getReportScheduleRequest($reportScheduleId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportScheduleResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getReportSchedule'
     *
     * @param  string $reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getReportScheduleRequest($reportScheduleId) : RequestInterface
    {
        // verify the required parameter 'reportScheduleId' is set
        if ($reportScheduleId === null || (is_array($reportScheduleId) && count($reportScheduleId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportScheduleId when calling getReportSchedule'
            );
        }

        $resourcePath = '/reports/2020-09-04/schedules/{reportScheduleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($reportScheduleId !== null) {
            $resourcePath = str_replace(
                '{' . 'reportScheduleId' . '}',
                ObjectSerializer::toPathValue($reportScheduleId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getReportSchedules
     *
     * @param string[] $reportTypes A list of report types used to filter report schedules. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse
     */
    public function getReportSchedules($reportTypes): \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse
    {
        list($response) = $this->getReportSchedulesWithHttpInfo($reportTypes);
        return $response;
    }

    /**
     * Operation getReportSchedulesWithHttpInfo
     *
     * @param  string[] $reportTypes A list of report types used to filter report schedules. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse>
     */
    private function getReportSchedulesWithHttpInfo($reportTypes) : array
    {
        $request = $this->getReportSchedulesRequest($reportTypes);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportSchedulesResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getReportSchedules'
     *
     * @param  string[] $reportTypes A list of report types used to filter report schedules. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getReportSchedulesRequest($reportTypes) : RequestInterface
    {
        // verify the required parameter 'reportTypes' is set
        if ($reportTypes === null || (is_array($reportTypes) && count($reportTypes) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $reportTypes when calling getReportSchedules'
            );
        }
        if (count($reportTypes) > 10) {
            throw new InvalidArgumentException('invalid value for "$reportTypes" when calling ReportsApi.getReportSchedules, number of items must be less than or equal to 10.');
        }
        if (count($reportTypes) < 1) {
            throw new InvalidArgumentException('invalid value for "$reportTypes" when calling ReportsApi.getReportSchedules, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/reports/2020-09-04/schedules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($reportTypes)) {
            $reportTypes = ObjectSerializer::serializeCollection($reportTypes, 'form', true);
        }
        if ($reportTypes !== null) {
            $queryParams['reportTypes'] = $reportTypes;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getReports
     *
     * @param string[] $reportTypes A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param string[] $processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param string[] $marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)
     * @param int $pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param \DateTime $createdSince The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param \DateTime $createdUntil The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)
     * @param string $nextToken A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse
     */
    public function getReports($reportTypes = null, $processingStatuses = null, $marketplaceIds = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $nextToken = null): \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse
    {
        list($response) = $this->getReportsWithHttpInfo($reportTypes, $processingStatuses, $marketplaceIds, $pageSize, $createdSince, $createdUntil, $nextToken);
        return $response;
    }

    /**
     * Operation getReportsWithHttpInfo
     *
     * @param  string[] $reportTypes A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param  string[] $processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param  string[] $marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)
     * @param  int $pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param  \DateTime $createdSince The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param  \DateTime $createdUntil The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)
     * @param  string $nextToken A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse>
     */
    private function getReportsWithHttpInfo($reportTypes = null, $processingStatuses = null, $marketplaceIds = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $nextToken = null) : array
    {
        $request = $this->getReportsRequest($reportTypes, $processingStatuses, $marketplaceIds, $pageSize, $createdSince, $createdUntil, $nextToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 415:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Reports\GetReportsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getReports'
     *
     * @param  string[] $reportTypes A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. (optional)
     * @param  string[] $processingStatuses A list of processing statuses used to filter reports. (optional)
     * @param  string[] $marketplaceIds A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. (optional)
     * @param  int $pageSize The maximum number of reports to return in a single call. (optional, default to 10)
     * @param  \DateTime $createdSince The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. (optional)
     * @param  \DateTime $createdUntil The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. (optional)
     * @param  string $nextToken A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getReportsRequest($reportTypes = null, $processingStatuses = null, $marketplaceIds = null, $pageSize = 10, $createdSince = null, $createdUntil = null, $nextToken = null) : RequestInterface
    {
        if ($reportTypes !== null && count($reportTypes) > 10) {
            throw new InvalidArgumentException('invalid value for "$reportTypes" when calling ReportsApi.getReports, number of items must be less than or equal to 10.');
        }
        if ($reportTypes !== null && count($reportTypes) < 1) {
            throw new InvalidArgumentException('invalid value for "$reportTypes" when calling ReportsApi.getReports, number of items must be greater than or equal to 1.');
        }

        if ($processingStatuses !== null && count($processingStatuses) < 1) {
            throw new InvalidArgumentException('invalid value for "$processingStatuses" when calling ReportsApi.getReports, number of items must be greater than or equal to 1.');
        }

        if ($marketplaceIds !== null && count($marketplaceIds) > 10) {
            throw new InvalidArgumentException('invalid value for "$marketplaceIds" when calling ReportsApi.getReports, number of items must be less than or equal to 10.');
        }
        if ($marketplaceIds !== null && count($marketplaceIds) < 1) {
            throw new InvalidArgumentException('invalid value for "$marketplaceIds" when calling ReportsApi.getReports, number of items must be greater than or equal to 1.');
        }

        if ($pageSize !== null && $pageSize > 100) {
            throw new InvalidArgumentException('invalid value for "$pageSize" when calling ReportsApi.getReports, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new InvalidArgumentException('invalid value for "$pageSize" when calling ReportsApi.getReports, must be bigger than or equal to 1.');
        }


        $resourcePath = '/reports/2020-09-04/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($reportTypes)) {
            $reportTypes = ObjectSerializer::serializeCollection($reportTypes, 'form', true);
        }
        if ($reportTypes !== null) {
            $queryParams['reportTypes'] = $reportTypes;
        }
        // query params
        if (is_array($processingStatuses)) {
            $processingStatuses = ObjectSerializer::serializeCollection($processingStatuses, 'form', true);
        }
        if ($processingStatuses !== null) {
            $queryParams['processingStatuses'] = $processingStatuses;
        }
        // query params
        if (is_array($marketplaceIds)) {
            $marketplaceIds = ObjectSerializer::serializeCollection($marketplaceIds, 'form', true);
        }
        if ($marketplaceIds !== null) {
            $queryParams['marketplaceIds'] = $marketplaceIds;
        }
        // query params
        if (is_array($pageSize)) {
            $pageSize = ObjectSerializer::serializeCollection($pageSize, '', true);
        }
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $pageSize;
        }
        // query params
        if (is_array($createdSince)) {
            $createdSince = ObjectSerializer::serializeCollection($createdSince, '', true);
        }
        if ($createdSince !== null) {
            $queryParams['createdSince'] = $createdSince;
        }
        // query params
        if (is_array($createdUntil)) {
            $createdUntil = ObjectSerializer::serializeCollection($createdUntil, '', true);
        }
        if ($createdUntil !== null) {
            $queryParams['createdUntil'] = $createdUntil;
        }
        // query params
        if (is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }
        if ($nextToken !== null) {
            $queryParams['nextToken'] = $nextToken;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

}
