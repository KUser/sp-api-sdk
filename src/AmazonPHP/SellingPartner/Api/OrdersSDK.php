<?php declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Api;

use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use AmazonPHP\SellingPartner\HttpSignatureHeaders;
use AmazonPHP\SellingPartner\OAuth;
use AmazonPHP\SellingPartner\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 */
final class OrdersSDK
{
    private OAuth $oauth;

    public function __construct(OAuth $authentication)
    {
        $this->oauth = $authentication;
    }

    /**
     * Operation getOrder.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrder(string $orderId) : \AmazonPHP\SellingPartner\Model\Orders\GetOrderResponse
    {
        [$response] = $this->getOrderWithHttpInfo($orderId);

        return $response;
    }

    /**
     * Create request for operation 'getOrder'.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrderRequest(string $orderId) : RequestInterface
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (\is_array($orderId) && \count($orderId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrder'
            );
        }

        $resourcePath = '/orders/v0/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = \str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrderAddress.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrderAddress(string $orderId) : \AmazonPHP\SellingPartner\Model\Orders\GetOrderAddressResponse
    {
        [$response] = $this->getOrderAddressWithHttpInfo($orderId);

        return $response;
    }

    /**
     * Create request for operation 'getOrderAddress'.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrderAddressRequest(string $orderId) : RequestInterface
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (\is_array($orderId) && \count($orderId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrderAddress'
            );
        }

        $resourcePath = '/orders/v0/orders/{orderId}/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = \str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrderBuyerInfo.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrderBuyerInfo(string $orderId) : \AmazonPHP\SellingPartner\Model\Orders\GetOrderBuyerInfoResponse
    {
        [$response] = $this->getOrderBuyerInfoWithHttpInfo($orderId);

        return $response;
    }

    /**
     * Create request for operation 'getOrderBuyerInfo'.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrderBuyerInfoRequest(string $orderId) : RequestInterface
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (\is_array($orderId) && \count($orderId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrderBuyerInfo'
            );
        }

        $resourcePath = '/orders/v0/orders/{orderId}/buyerInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = \str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrderItems.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrderItems(string $orderId, string $nextToken = null) : \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsResponse
    {
        [$response] = $this->getOrderItemsWithHttpInfo($orderId, $nextToken);

        return $response;
    }

    /**
     * Create request for operation 'getOrderItems'.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrderItemsRequest(string $orderId, string $nextToken = null) : RequestInterface
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (\is_array($orderId) && \count($orderId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrderItems'
            );
        }

        $resourcePath = '/orders/v0/orders/{orderId}/orderItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (\is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }

        if ($nextToken !== null) {
            $queryParams['NextToken'] = $nextToken;
        }

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = \str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrderItemsBuyerInfo.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrderItemsBuyerInfo(string $orderId, string $nextToken = null) : \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsBuyerInfoResponse
    {
        [$response] = $this->getOrderItemsBuyerInfoWithHttpInfo($orderId, $nextToken);

        return $response;
    }

    /**
     * Create request for operation 'getOrderItemsBuyerInfo'.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrderItemsBuyerInfoRequest(string $orderId, string $nextToken = null) : RequestInterface
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (\is_array($orderId) && \count($orderId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrderItemsBuyerInfo'
            );
        }

        $resourcePath = '/orders/v0/orders/{orderId}/orderItems/buyerInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (\is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }

        if ($nextToken !== null) {
            $queryParams['NextToken'] = $nextToken;
        }

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        // path params
        if ($orderId !== null) {
            $resourcePath = \str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrders.
     *
     * @param array<array-key, string> $marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces. (required)
     * @param null|string $createdAfter A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format. (optional)
     * @param null|string $createdBefore A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedAfter A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedBefore A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param array<array-key, string>|null $orderStatuses A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.). (optional)
     * @param array<array-key, string>|null $fulfillmentChannels A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller). (optional)
     * @param array<array-key, string>|null $paymentMethods A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS). (optional)
     * @param null|string $buyerEmail The email address of a buyer. Used to select orders that contain the specified email address. (optional)
     * @param null|string $sellerOrderId An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified. (optional)
     * @param int|null $maxResultsPerPage A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100. (optional)
     * @param array<array-key, string>|null $easyShipShipmentStatuses A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller). (optional)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     * @param array<array-key, string>|null $amazonOrderIds A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. (optional)
     * @param null|string $actualFulfillmentSupplySourceId Denotes the recommended sourceId where the order should be fulfilled from. (optional)
     * @param bool|null $isISPU When true, this order is marked to be picked up from a store rather than delivered. (optional)
     * @param null|string $storeChainStoreId The store chain store identifier. Linked to a specific store in a store chain. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     */
    public function getOrders(array $marketplaceIds, string $createdAfter = null, string $createdBefore = null, string $lastUpdatedAfter = null, string $lastUpdatedBefore = null, array $orderStatuses = null, array $fulfillmentChannels = null, array $paymentMethods = null, string $buyerEmail = null, string $sellerOrderId = null, int $maxResultsPerPage = null, array $easyShipShipmentStatuses = null, string $nextToken = null, array $amazonOrderIds = null, string $actualFulfillmentSupplySourceId = null, bool $isISPU = null, string $storeChainStoreId = null) : \AmazonPHP\SellingPartner\Model\Orders\GetOrdersResponse
    {
        [$response] = $this->getOrdersWithHttpInfo($marketplaceIds, $createdAfter, $createdBefore, $lastUpdatedAfter, $lastUpdatedBefore, $orderStatuses, $fulfillmentChannels, $paymentMethods, $buyerEmail, $sellerOrderId, $maxResultsPerPage, $easyShipShipmentStatuses, $nextToken, $amazonOrderIds, $actualFulfillmentSupplySourceId, $isISPU, $storeChainStoreId);

        return $response;
    }

    /**
     * Create request for operation 'getOrders'.
     *
     * @param array<array-key, string> $marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces. (required)
     * @param null|string $createdAfter A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format. (optional)
     * @param null|string $createdBefore A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedAfter A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedBefore A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param array<array-key, string>|null $orderStatuses A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.). (optional)
     * @param array<array-key, string>|null $fulfillmentChannels A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller). (optional)
     * @param array<array-key, string>|null $paymentMethods A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS). (optional)
     * @param null|string $buyerEmail The email address of a buyer. Used to select orders that contain the specified email address. (optional)
     * @param null|string $sellerOrderId An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified. (optional)
     * @param int|null $maxResultsPerPage A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100. (optional)
     * @param array<array-key, string>|null $easyShipShipmentStatuses A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller). (optional)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     * @param array<array-key, string>|null $amazonOrderIds A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. (optional)
     * @param null|string $actualFulfillmentSupplySourceId Denotes the recommended sourceId where the order should be fulfilled from. (optional)
     * @param bool|null $isISPU When true, this order is marked to be picked up from a store rather than delivered. (optional)
     * @param null|string $storeChainStoreId The store chain store identifier. Linked to a specific store in a store chain. (optional)
     *
     * @throws InvalidArgumentException
     *
     * @return RequestInterface
     */
    public function getOrdersRequest(array $marketplaceIds, string $createdAfter = null, string $createdBefore = null, string $lastUpdatedAfter = null, string $lastUpdatedBefore = null, array $orderStatuses = null, array $fulfillmentChannels = null, array $paymentMethods = null, string $buyerEmail = null, string $sellerOrderId = null, int $maxResultsPerPage = null, array $easyShipShipmentStatuses = null, string $nextToken = null, array $amazonOrderIds = null, string $actualFulfillmentSupplySourceId = null, bool $isISPU = null, string $storeChainStoreId = null) : RequestInterface
    {
        // verify the required parameter 'marketplaceIds' is set
        if ($marketplaceIds === null || (\is_array($marketplaceIds) && \count($marketplaceIds) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceIds when calling getOrders'
            );
        }

        if (\count($marketplaceIds) > 50) {
            throw new InvalidArgumentException('invalid value for "$marketplaceIds" when calling OrdersV0Api.getOrders, number of items must be less than or equal to 50.');
        }

        if ($amazonOrderIds !== null && \count($amazonOrderIds) > 50) {
            throw new InvalidArgumentException('invalid value for "$amazonOrderIds" when calling OrdersV0Api.getOrders, number of items must be less than or equal to 50.');
        }

        $resourcePath = '/orders/v0/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (\is_array($createdAfter)) {
            $createdAfter = ObjectSerializer::serializeCollection($createdAfter, '', true);
        }

        if ($createdAfter !== null) {
            $queryParams['CreatedAfter'] = $createdAfter;
        }
        // query params
        if (\is_array($createdBefore)) {
            $createdBefore = ObjectSerializer::serializeCollection($createdBefore, '', true);
        }

        if ($createdBefore !== null) {
            $queryParams['CreatedBefore'] = $createdBefore;
        }
        // query params
        if (\is_array($lastUpdatedAfter)) {
            $lastUpdatedAfter = ObjectSerializer::serializeCollection($lastUpdatedAfter, '', true);
        }

        if ($lastUpdatedAfter !== null) {
            $queryParams['LastUpdatedAfter'] = $lastUpdatedAfter;
        }
        // query params
        if (\is_array($lastUpdatedBefore)) {
            $lastUpdatedBefore = ObjectSerializer::serializeCollection($lastUpdatedBefore, '', true);
        }

        if ($lastUpdatedBefore !== null) {
            $queryParams['LastUpdatedBefore'] = $lastUpdatedBefore;
        }
        // query params
        if (\is_array($orderStatuses)) {
            $orderStatuses = ObjectSerializer::serializeCollection($orderStatuses, 'form', true);
        }

        if ($orderStatuses !== null) {
            $queryParams['OrderStatuses'] = $orderStatuses;
        }
        // query params
        if (\is_array($marketplaceIds)) {
            $marketplaceIds = ObjectSerializer::serializeCollection($marketplaceIds, 'form', true);
        }

        if ($marketplaceIds !== null) {
            $queryParams['MarketplaceIds'] = $marketplaceIds;
        }
        // query params
        if (\is_array($fulfillmentChannels)) {
            $fulfillmentChannels = ObjectSerializer::serializeCollection($fulfillmentChannels, 'form', true);
        }

        if ($fulfillmentChannels !== null) {
            $queryParams['FulfillmentChannels'] = $fulfillmentChannels;
        }
        // query params
        if (\is_array($paymentMethods)) {
            $paymentMethods = ObjectSerializer::serializeCollection($paymentMethods, 'form', true);
        }

        if ($paymentMethods !== null) {
            $queryParams['PaymentMethods'] = $paymentMethods;
        }
        // query params
        if (\is_array($buyerEmail)) {
            $buyerEmail = ObjectSerializer::serializeCollection($buyerEmail, '', true);
        }

        if ($buyerEmail !== null) {
            $queryParams['BuyerEmail'] = $buyerEmail;
        }
        // query params
        if (\is_array($sellerOrderId)) {
            $sellerOrderId = ObjectSerializer::serializeCollection($sellerOrderId, '', true);
        }

        if ($sellerOrderId !== null) {
            $queryParams['SellerOrderId'] = $sellerOrderId;
        }
        // query params
        if (\is_array($maxResultsPerPage)) {
            $maxResultsPerPage = ObjectSerializer::serializeCollection($maxResultsPerPage, '', true);
        }

        if ($maxResultsPerPage !== null) {
            $queryParams['MaxResultsPerPage'] = $maxResultsPerPage;
        }
        // query params
        if (\is_array($easyShipShipmentStatuses)) {
            $easyShipShipmentStatuses = ObjectSerializer::serializeCollection($easyShipShipmentStatuses, 'form', true);
        }

        if ($easyShipShipmentStatuses !== null) {
            $queryParams['EasyShipShipmentStatuses'] = $easyShipShipmentStatuses;
        }
        // query params
        if (\is_array($nextToken)) {
            $nextToken = ObjectSerializer::serializeCollection($nextToken, '', true);
        }

        if ($nextToken !== null) {
            $queryParams['NextToken'] = $nextToken;
        }
        // query params
        if (\is_array($amazonOrderIds)) {
            $amazonOrderIds = ObjectSerializer::serializeCollection($amazonOrderIds, 'form', true);
        }

        if ($amazonOrderIds !== null) {
            $queryParams['AmazonOrderIds'] = $amazonOrderIds;
        }
        // query params
        if (\is_array($actualFulfillmentSupplySourceId)) {
            $actualFulfillmentSupplySourceId = ObjectSerializer::serializeCollection($actualFulfillmentSupplySourceId, '', true);
        }

        if ($actualFulfillmentSupplySourceId !== null) {
            $queryParams['ActualFulfillmentSupplySourceId'] = $actualFulfillmentSupplySourceId;
        }
        // query params
        if (\is_array($isISPU)) {
            $isISPU = ObjectSerializer::serializeCollection($isISPU, '', true);
        }

        if ($isISPU !== null) {
            $queryParams['IsISPU'] = $isISPU;
        }
        // query params
        if (\is_array($storeChainStoreId)) {
            $storeChainStoreId = ObjectSerializer::serializeCollection($storeChainStoreId, '', true);
        }

        if ($storeChainStoreId !== null) {
            $queryParams['StoreChainStoreId'] = $storeChainStoreId;
        }

        if (\count($queryParams)) {
            $query = \http_build_query($queryParams);
        }

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json'],
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];

                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams, JSON_THROW_ON_ERROR)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = \array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getOrderWithHttpInfo.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrderResponse>
     */
    private function getOrderWithHttpInfo(string $orderId) : array
    {
        $request = $this->getOrderRequest($orderId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrderResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrderResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrderResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderAddressWithHttpInfo.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrderAddressResponse>
     */
    private function getOrderAddressWithHttpInfo(string $orderId) : array
    {
        $request = $this->getOrderAddressRequest($orderId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrderAddressResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrderAddressResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrderAddressResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderBuyerInfoWithHttpInfo.
     *
     * @param string $orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrderBuyerInfoResponse>
     */
    private function getOrderBuyerInfoWithHttpInfo(string $orderId) : array
    {
        $request = $this->getOrderBuyerInfoRequest($orderId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrderBuyerInfoResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrderBuyerInfoResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrderBuyerInfoResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderItemsWithHttpInfo.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsResponse>
     */
    private function getOrderItemsWithHttpInfo(string $orderId, string $nextToken = null) : array
    {
        $request = $this->getOrderItemsRequest($orderId, $nextToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrderItemsBuyerInfoWithHttpInfo.
     *
     * @param string $orderId An Amazon-defined order identifier, in 3-7-7 format. (required)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsBuyerInfoResponse>
     */
    private function getOrderItemsBuyerInfoWithHttpInfo(string $orderId, string $nextToken = null) : array
    {
        $request = $this->getOrderItemsBuyerInfoRequest($orderId, $nextToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsBuyerInfoResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsBuyerInfoResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrderItemsBuyerInfoResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrdersWithHttpInfo.
     *
     * @param array<array-key, string> $marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces. (required)
     * @param null|string $createdAfter A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format. (optional)
     * @param null|string $createdBefore A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedAfter A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param null|string $lastUpdatedBefore A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. (optional)
     * @param array<array-key, string>|null $orderStatuses A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.). (optional)
     * @param array<array-key, string>|null $fulfillmentChannels A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller). (optional)
     * @param array<array-key, string>|null $paymentMethods A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS). (optional)
     * @param null|string $buyerEmail The email address of a buyer. Used to select orders that contain the specified email address. (optional)
     * @param null|string $sellerOrderId An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified. (optional)
     * @param int|null $maxResultsPerPage A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100. (optional)
     * @param array<array-key, string>|null $easyShipShipmentStatuses A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller). (optional)
     * @param null|string $nextToken A string token returned in the response of your previous request. (optional)
     * @param array<array-key, string>|null $amazonOrderIds A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. (optional)
     * @param null|string $actualFulfillmentSupplySourceId Denotes the recommended sourceId where the order should be fulfilled from. (optional)
     * @param bool|null $isISPU When true, this order is marked to be picked up from a store rather than delivered. (optional)
     * @param null|string $storeChainStoreId The store chain store identifier. Linked to a specific store in a store chain. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     *
     * @return array<array-key, \AmazonPHP\SellingPartner\Model\Orders\GetOrdersResponse>
     */
    private function getOrdersWithHttpInfo(array $marketplaceIds, string $createdAfter = null, string $createdBefore = null, string $lastUpdatedAfter = null, string $lastUpdatedBefore = null, array $orderStatuses = null, array $fulfillmentChannels = null, array $paymentMethods = null, string $buyerEmail = null, string $sellerOrderId = null, int $maxResultsPerPage = null, array $easyShipShipmentStatuses = null, string $nextToken = null, array $amazonOrderIds = null, string $actualFulfillmentSupplySourceId = null, bool $isISPU = null, string $storeChainStoreId = null) : array
    {
        $request = $this->getOrdersRequest($marketplaceIds, $createdAfter, $createdBefore, $lastUpdatedAfter, $lastUpdatedBefore, $orderStatuses, $fulfillmentChannels, $paymentMethods, $buyerEmail, $sellerOrderId, $maxResultsPerPage, $easyShipShipmentStatuses, $nextToken, $amazonOrderIds, $actualFulfillmentSupplySourceId, $isISPU, $storeChainStoreId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    \sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\Orders\GetOrdersResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\Orders\GetOrdersResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                case 400:
                case 403:
                case 404:
                case 429:
                case 500:
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\Orders\GetOrdersResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }
}
