<?php

namespace AmazonPHP\SellingPartner\Api\AplusContentApi;

use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use AmazonPHP\SellingPartner\OAuth;
use AmazonPHP\SellingPartner\ObjectSerializer;
use AmazonPHP\SellingPartner\HttpSignatureHeaders;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 */
final class APlusSDK
{
    private OAuth $oauth;

    public function __construct(OAuth $authentication)
    {
        $this->oauth = $authentication;
    }

    /**
     * Operation createContentDocument
     *
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse
     */
    public function createContentDocument($marketplaceId, $postContentDocumentRequest): \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse
    {
        list($response) = $this->createContentDocumentWithHttpInfo($marketplaceId, $postContentDocumentRequest);
        return $response;
    }

    /**
     * Operation createContentDocumentWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse>
     */
    private function createContentDocumentWithHttpInfo($marketplaceId, $postContentDocumentRequest) : array
    {
        $request = $this->createContentDocumentRequest($marketplaceId, $postContentDocumentRequest);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'createContentDocument'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function createContentDocumentRequest($marketplaceId, $postContentDocumentRequest) : RequestInterface
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling createContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.createContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling createContentDocument'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($postContentDocumentRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($postContentDocumentRequest));
            } else {
                $httpBody = $postContentDocumentRequest;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation getContentDocument
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse
     */
    public function getContentDocument($contentReferenceKey, $marketplaceId, $includedDataSet): \AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse
    {
        list($response) = $this->getContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet);
        return $response;
    }

    /**
     * Operation getContentDocumentWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse>
     */
    private function getContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet) : array
    {
        $request = $this->getContentDocumentRequest($contentReferenceKey, $marketplaceId, $includedDataSet);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\GetContentDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'getContentDocument'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function getContentDocumentRequest($contentReferenceKey, $marketplaceId, $includedDataSet) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling getContentDocument'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.getContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.getContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'includedDataSet' is set
        if ($includedDataSet === null || (is_array($includedDataSet) && count($includedDataSet) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $includedDataSet when calling getContentDocument'
            );
        }
        if (count($includedDataSet) < 1) {
            throw new InvalidArgumentException('invalid value for "$includedDataSet" when calling AplusContentApi.getContentDocument, number of items must be greater than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($includedDataSet)) {
            $includedDataSet = ObjectSerializer::serializeCollection($includedDataSet, 'form', true);
        }
        if ($includedDataSet !== null) {
            $queryParams['includedDataSet'] = $includedDataSet;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation listContentDocumentAsinRelations
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param string[] $asinSet The set of ASINs. (optional)
     * @param string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse
     */
    public function listContentDocumentAsinRelations($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null): \AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse
    {
        list($response) = $this->listContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken);
        return $response;
    }

    /**
     * Operation listContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse>
     */
    private function listContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null) : array
    {
        $request = $this->listContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $includedDataSet, $asinSet, $pageToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ListContentDocumentAsinRelationsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'listContentDocumentAsinRelations'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string[] $includedDataSet The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata. (optional)
     * @param  string[] $asinSet The set of ASINs. (optional)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function listContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $includedDataSet = null, $asinSet = null, $pageToken = null) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling listContentDocumentAsinRelations'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling listContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        if ($includedDataSet !== null && count($includedDataSet) < 0) {
            throw new InvalidArgumentException('invalid value for "$includedDataSet" when calling AplusContentApi.listContentDocumentAsinRelations, number of items must be greater than or equal to 0.');
        }


        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.listContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($includedDataSet)) {
            $includedDataSet = ObjectSerializer::serializeCollection($includedDataSet, 'form', true);
        }
        if ($includedDataSet !== null) {
            $queryParams['includedDataSet'] = $includedDataSet;
        }
        // query params
        if (is_array($asinSet)) {
            $asinSet = ObjectSerializer::serializeCollection($asinSet, 'form', true);
        }
        if ($asinSet !== null) {
            $queryParams['asinSet'] = $asinSet;
        }
        // query params
        if (is_array($pageToken)) {
            $pageToken = ObjectSerializer::serializeCollection($pageToken, '', true);
        }
        if ($pageToken !== null) {
            $queryParams['pageToken'] = $pageToken;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation postContentDocumentApprovalSubmission
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse
     */
    public function postContentDocumentApprovalSubmission($contentReferenceKey, $marketplaceId): \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse
    {
        list($response) = $this->postContentDocumentApprovalSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId);
        return $response;
    }

    /**
     * Operation postContentDocumentApprovalSubmissionWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse>
     */
    private function postContentDocumentApprovalSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId) : array
    {
        $request = $this->postContentDocumentApprovalSubmissionRequest($contentReferenceKey, $marketplaceId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentApprovalSubmissionResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'postContentDocumentApprovalSubmission'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function postContentDocumentApprovalSubmissionRequest($contentReferenceKey, $marketplaceId) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentApprovalSubmission'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentApprovalSubmission, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentApprovalSubmission'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentApprovalSubmission, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation postContentDocumentAsinRelations
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse
     */
    public function postContentDocumentAsinRelations($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest): \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse
    {
        list($response) = $this->postContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest);
        return $response;
    }

    /**
     * Operation postContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse>
     */
    private function postContentDocumentAsinRelationsWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest) : array
    {
        $request = $this->postContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'postContentDocumentAsinRelations'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentAsinRelationsRequest $postContentDocumentAsinRelationsRequest The content document ASIN relations request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function postContentDocumentAsinRelationsRequest($contentReferenceKey, $marketplaceId, $postContentDocumentAsinRelationsRequest) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentAsinRelations'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentAsinRelationsRequest' is set
        if ($postContentDocumentAsinRelationsRequest === null || (is_array($postContentDocumentAsinRelationsRequest) && count($postContentDocumentAsinRelationsRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $postContentDocumentAsinRelationsRequest when calling postContentDocumentAsinRelations'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($postContentDocumentAsinRelationsRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($postContentDocumentAsinRelationsRequest));
            } else {
                $httpBody = $postContentDocumentAsinRelationsRequest;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation postContentDocumentSuspendSubmission
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse
     */
    public function postContentDocumentSuspendSubmission($contentReferenceKey, $marketplaceId): \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse
    {
        list($response) = $this->postContentDocumentSuspendSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId);
        return $response;
    }

    /**
     * Operation postContentDocumentSuspendSubmissionWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse>
     */
    private function postContentDocumentSuspendSubmissionWithHttpInfo($contentReferenceKey, $marketplaceId) : array
    {
        $request = $this->postContentDocumentSuspendSubmissionRequest($contentReferenceKey, $marketplaceId);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentSuspendSubmissionResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'postContentDocumentSuspendSubmission'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function postContentDocumentSuspendSubmissionRequest($contentReferenceKey, $marketplaceId) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling postContentDocumentSuspendSubmission'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.postContentDocumentSuspendSubmission, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling postContentDocumentSuspendSubmission'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.postContentDocumentSuspendSubmission, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation searchContentDocuments
     *
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse
     */
    public function searchContentDocuments($marketplaceId, $pageToken = null): \AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse
    {
        list($response) = $this->searchContentDocumentsWithHttpInfo($marketplaceId, $pageToken);
        return $response;
    }

    /**
     * Operation searchContentDocumentsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse>
     */
    private function searchContentDocumentsWithHttpInfo($marketplaceId, $pageToken = null) : array
    {
        $request = $this->searchContentDocumentsRequest($marketplaceId, $pageToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\SearchContentDocumentsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'searchContentDocuments'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function searchContentDocumentsRequest($marketplaceId, $pageToken = null) : RequestInterface
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling searchContentDocuments'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.searchContentDocuments, must be bigger than or equal to 1.');
        }

        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.searchContentDocuments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentDocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($pageToken)) {
            $pageToken = ObjectSerializer::serializeCollection($pageToken, '', true);
        }
        if ($pageToken !== null) {
            $queryParams['pageToken'] = $pageToken;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation searchContentPublishRecords
     *
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse
     */
    public function searchContentPublishRecords($marketplaceId, $asin, $pageToken = null): \AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse
    {
        list($response) = $this->searchContentPublishRecordsWithHttpInfo($marketplaceId, $asin, $pageToken);
        return $response;
    }

    /**
     * Operation searchContentPublishRecordsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse>
     */
    private function searchContentPublishRecordsWithHttpInfo($marketplaceId, $asin, $pageToken = null) : array
    {
        $request = $this->searchContentPublishRecordsRequest($marketplaceId, $asin, $pageToken);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\SearchContentPublishRecordsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'searchContentPublishRecords'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  string $asin The Amazon Standard Identification Number (ASIN). (required)
     * @param  string $pageToken A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function searchContentPublishRecordsRequest($marketplaceId, $asin, $pageToken = null) : RequestInterface
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling searchContentPublishRecords'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'asin' is set
        if ($asin === null || (is_array($asin) && count($asin) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $asin when calling searchContentPublishRecords'
            );
        }
        if (strlen($asin) < 10) {
            throw new InvalidArgumentException('invalid length for "$asin" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 10.');
        }

        if ($pageToken !== null && strlen($pageToken) < 1) {
            throw new InvalidArgumentException('invalid length for "$pageToken" when calling AplusContentApi.searchContentPublishRecords, must be bigger than or equal to 1.');
        }


        $resourcePath = '/aplus/2020-11-01/contentPublishRecords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($asin)) {
            $asin = ObjectSerializer::serializeCollection($asin, '', true);
        }
        if ($asin !== null) {
            $queryParams['asin'] = $asin;
        }
        // query params
        if (is_array($pageToken)) {
            $pageToken = ObjectSerializer::serializeCollection($pageToken, '', true);
        }
        if ($pageToken !== null) {
            $queryParams['pageToken'] = $pageToken;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation updateContentDocument
     *
     * @param string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse
     */
    public function updateContentDocument($contentReferenceKey, $marketplaceId, $postContentDocumentRequest): \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse
    {
        list($response) = $this->updateContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest);
        return $response;
    }

    /**
     * Operation updateContentDocumentWithHttpInfo
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse>
     */
    private function updateContentDocumentWithHttpInfo($contentReferenceKey, $marketplaceId, $postContentDocumentRequest) : array
    {
        $request = $this->updateContentDocumentRequest($contentReferenceKey, $marketplaceId, $postContentDocumentRequest);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'updateContentDocument'
     *
     * @param  string $contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier. (required)
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function updateContentDocumentRequest($contentReferenceKey, $marketplaceId, $postContentDocumentRequest) : RequestInterface
    {
        // verify the required parameter 'contentReferenceKey' is set
        if ($contentReferenceKey === null || (is_array($contentReferenceKey) && count($contentReferenceKey) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contentReferenceKey when calling updateContentDocument'
            );
        }
        if (strlen($contentReferenceKey) < 1) {
            throw new InvalidArgumentException('invalid length for "$contentReferenceKey" when calling AplusContentApi.updateContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling updateContentDocument'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.updateContentDocument, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling updateContentDocument'
            );
        }

        $resourcePath = '/aplus/2020-11-01/contentDocuments/{contentReferenceKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($contentReferenceKey !== null) {
            $resourcePath = str_replace(
                '{' . 'contentReferenceKey' . '}',
                ObjectSerializer::toPathValue($contentReferenceKey),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($postContentDocumentRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($postContentDocumentRequest));
            } else {
                $httpBody = $postContentDocumentRequest;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    /**
     * Operation validateContentDocumentAsinRelations
     *
     * @param string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse
     */
    public function validateContentDocumentAsinRelations($marketplaceId, $postContentDocumentRequest, $asinSet = null): \AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse
    {
        list($response) = $this->validateContentDocumentAsinRelationsWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet);
        return $response;
    }

    /**
     * Operation validateContentDocumentAsinRelationsWithHttpInfo
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\ApiException on non-2xx response
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return array<\AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse>
     */
    private function validateContentDocumentAsinRelationsWithHttpInfo($marketplaceId, $postContentDocumentRequest, $asinSet = null) : array
    {
        $request = $this->validateContentDocumentAsinRelationsRequest($marketplaceId, $postContentDocumentRequest, $asinSet);

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 503:
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = \AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ValidateContentDocumentAsinRelationsResponse::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        \AmazonPHP\SellingPartner\Model\APlus\ErrorList::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Create request for operation 'validateContentDocumentAsinRelations'
     *
     * @param  string $marketplaceId The identifier for the marketplace where the A+ Content is published. (required)
     * @param  \AmazonPHP\SellingPartner\Model\APlus\PostContentDocumentRequest $postContentDocumentRequest The content document request details. (required)
     * @param  string[] $asinSet The set of ASINs. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    private function validateContentDocumentAsinRelationsRequest($marketplaceId, $postContentDocumentRequest, $asinSet = null) : RequestInterface
    {
        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling validateContentDocumentAsinRelations'
            );
        }
        if (strlen($marketplaceId) < 1) {
            throw new InvalidArgumentException('invalid length for "$marketplaceId" when calling AplusContentApi.validateContentDocumentAsinRelations, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'postContentDocumentRequest' is set
        if ($postContentDocumentRequest === null || (is_array($postContentDocumentRequest) && count($postContentDocumentRequest) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $postContentDocumentRequest when calling validateContentDocumentAsinRelations'
            );
        }


        $resourcePath = '/aplus/2020-11-01/contentAsinValidations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($marketplaceId)) {
            $marketplaceId = ObjectSerializer::serializeCollection($marketplaceId, '', true);
        }
        if ($marketplaceId !== null) {
            $queryParams['marketplaceId'] = $marketplaceId;
        }
        // query params
        if (is_array($asinSet)) {
            $asinSet = ObjectSerializer::serializeCollection($asinSet, 'form', true);
        }
        if ($asinSet !== null) {
            $queryParams['asinSet'] = $asinSet;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($postContentDocumentRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($postContentDocumentRequest));
            } else {
                $httpBody = $postContentDocumentRequest;
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

}
