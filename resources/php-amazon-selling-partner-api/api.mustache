<?php

namespace {{invokerPackage}}\Api\{{classname}};

use {{invokerPackage}}\Exception\ApiException;
use {{invokerPackage}}\Exception\InvalidArgumentException;
use {{invokerPackage}}\OAuth;
use {{invokerPackage}}\ObjectSerializer;
use {{invokerPackage}}\HttpSignatureHeaders;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Message\RequestInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 */
final {{#operations}}class {{packageName}}
{
    private OAuth $oauth;

    public function __construct(OAuth $authentication)
    {
        $this->oauth = $authentication;
    }

{{#operation}}
    /**
     * Operation {{{operationId}}}
{{#summary}}
     *
     * {{.}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This operation contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{#-last}}
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param {{{dataType}}} ${{paramName}}{{#description}} {{description}}{{/description}}{{^description}} {{paramName}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
     *
     * @throws \{{invokerPackage}}\Exception\ApiException on non-2xx response
     * @throws \{{invokerPackage}}\Exception\InvalidArgumentException
{{#returnType}}
     * @return {{returnType}}
{{/returnType}}
     */
    public function {{operationId}}({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}){{#returnType}}: {{returnType}}{{/returnType}}
    {
        {{#returnType}}list($response) = {{/returnType}}$this->{{operationId}}WithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});{{#returnType}}
        return $response;{{/returnType}}
    }

    /**
     * Operation {{{operationId}}}WithHttpInfo
{{#summary}}
     *
     * {{.}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This oepration contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{description}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
     *
     * @throws \{{invokerPackage}}\Exception\ApiException on non-2xx response
     * @throws \{{invokerPackage}}\Exception\InvalidArgumentException
    {{#returnType}}
     * @return array<{{returnType}}>
    {{/returnType}}
     */
    private function {{operationId}}WithHttpInfo({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}) : array
    {
        $request = $this->{{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}});

        try {
            try {
                $response = $this->oauth->client()->sendRequest($request);
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            {{#returnType}}
            {{#responses}}
            {{#-first}}

            switch($statusCode) {
            {{/-first}}
            {{#dataType}}
                {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                    $content = (string) $response->getBody()->getContents();

                    return [
                        ObjectSerializer::deserialize($content, {{{dataType}}}::class, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            {{/dataType}}
            {{#-last}}
            }
            {{/-last}}
            {{/responses}}

            $returnType = {{{returnType}}}::class;
            $content = (string) $response->getBody()->getContents();

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
            {{/returnType}}
            {{^returnType}}

            return [null, $statusCode, $response->getHeaders()];
            {{/returnType}}

        } catch (ApiException $e) {
            switch ($e->getCode()) {
        {{#responses}}
            {{#dataType}}
                {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        {{{dataType}}}::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            {{/dataType}}
        {{/responses}}
            }
            throw $e;
        }
    }

    /**
     * Create request for operation '{{{operationId}}}'
     *
{{#vendorExtensions.x-group-parameters}}
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
{{/vendorExtensions.x-group-parameters}}
{{#servers}}
{{#-first}}
     * This oepration contains host(s) defined in the OpenAP spec. Use 'hostIndex' to select the host.
{{/-first}}
     * URL: {{{url}}}
{{#-last}}
     *
{{/-last}}
{{/servers}}
{{#allParams}}
     * @param  {{{dataType}}} ${{paramName}}{{#description}} {{description}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
     *
     * @throws \{{invokerPackage}}\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function {{operationId}}Request({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}}) : RequestInterface
    {
        {{#vendorExtensions.x-group-parameters}}
        // unbox the parameters from the associative array
        {{#allParams}}
        ${{paramName}} = array_key_exists('{{paramName}}', $associative_array) ? $associative_array['{{paramName}}'] : {{#defaultValue}}{{{.}}}{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}};
        {{/allParams}}

        {{/vendorExtensions.x-group-parameters}}
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (${{paramName}} === null || (is_array(${{paramName}}) && count(${{paramName}}) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter ${{paramName}} when calling {{operationId}}'
            );
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
            throw new InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}${{paramName}} !== null && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) < {{minItems}}) {
            throw new InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}

        {{/hasValidation}}
        {{/allParams}}

        $resourcePath = '{{{path}}}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        {{#queryParams}}
        // query params
        {{#isExplode}}
        if (${{paramName}} !== null) {
        {{#style}}
            if('form' === '{{style}}' && is_array(${{paramName}})) {
                foreach(${{paramName}} as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['{{baseName}}'] = ${{paramName}};
            }
        {{/style}}
        {{^style}}
            $queryParams['{{baseName}}'] = ${{paramName}};
        {{/style}}
        }
        {{/isExplode}}
        {{^isExplode}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{#style}}{{style}}{{/style}}{{^style}}{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}{{/style}}', true);
        }
        if (${{paramName}} !== null) {
            $queryParams['{{baseName}}'] = ${{paramName}};
        }
        {{/isExplode}}
        {{/queryParams}}

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        {{#headerParams}}
        // header params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $headerParams['{{baseName}}'] = ObjectSerializer::toHeaderValue(${{paramName}});
        }
        {{/headerParams}}

        {{#pathParams}}
        // path params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $resourcePath = str_replace(
                '{' . '{{baseName}}' . '}',
                ObjectSerializer::toPathValue(${{paramName}}),
                $resourcePath
            );
        }
        {{/pathParams}}

        {{#formParams}}
        // form params
        if (${{paramName}} !== null) {
            {{#isFile}}
            $multipart = true;
            $formParams['{{baseName}}'] = [];
            $paramFiles = is_array(${{paramName}}) ? ${{paramName}} : [${{paramName}}];
            foreach ($paramFiles as $paramFile) {
                $formParams['{{baseName}}'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
            {{/isFile}}
            {{^isFile}}
            $formParams['{{baseName}}'] = ObjectSerializer::toFormValue(${{paramName}});
            {{/isFile}}
        }
        {{/formParams}}

        if ($multipart) {
            $headers = ['Accept' => ['application/json']];
        } else {
            $headers = [
                'Content-Type' => ['application/json'],
                'Accept' => ['application/json']
            ];
        }

        $request = $this->oauth->requestFactory()->createRequest(
            $method = 'GET',
            $host = $this->oauth->configuration()->apiURL() . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        {{#bodyParams}}
        if (isset(${{paramName}})) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization(${{paramName}}));
            } else {
                $httpBody = ${{paramName}};
            }

            $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
        {{/bodyParams}}
        {{^bodyParams}}
        if (count($formParams) > 0) {
        {{/bodyParams}}
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $request = $request->withBody($this->oauth->requestFactory()->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        $defaultHeaders = HttpSignatureHeaders::forIAMUser(
            $this->oauth->configuration(),
            $method,
            $this->oauth->accessToken(),
            $resourcePath,
            $query,
            (string) $request->getBody()
        );

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        foreach ($headers as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return $request;
    }

    {{/operation}}
}
{{/operations}}